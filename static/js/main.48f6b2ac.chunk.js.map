{"version":3,"sources":["config/config.js","config/constants.ts","shared/Spinner/Spinner.tsx","store/forms.ts","routes/Failure/Failure.tsx","store/config.ts","store/app/app.actions.ts","routes/Failure/FailureContainer.tsx","store/list/list.actions.ts","store/status/status.actions.ts","store/selected/selected.actions.ts","utils/hotkeys.ts","routes/MovePage/ListsFilter/ListsFilter.tsx","locale/lt.js","utils/calendar.ts","routes/MovePage/MovePage.tsx","store/app/app.selector.ts","utils/stringUtils.tsx","store/list/list.selector.ts","utils/filterUtils.ts","store/status/status.selector.ts","routes/MovePage/MovePageContainer.tsx","utils/utils.js","components/ListsTable.tsx","core/axios/index.ts","core/api/apiManager.ts","components/ListsPage.tsx","routes/ListsApp/ListsAppContainer.tsx","components/TasksList.tsx","components/TasksDoneList.tsx","components/TasksPage.tsx","routes/TasksApp/TasksAppContainer.tsx","routes/App.tsx","routes/AppContainer.tsx","routes/Status/Status.tsx","routes/User/User.tsx","utils/frontend.utils.ts","store/app/app.reducer.ts","store/status/status.reducer.ts","store/selected/selected.reducer.ts","store/reducers.ts","core/api/lists/lists.api.ts","core/api/index.ts","store/types.ts","core/api/utils.ts","store/app/app.sagas.ts","store/list/list.sagas.ts","store/sagas.js","store/store.ts","index.tsx"],"names":["config","appModes","devHost","apiHost","separatorString","listsAddon","settingsAddon","user","id","name","settings","openListIfExists","addNewAt","displayListLength","displayDoneLength","displayLast","statusNode","document","getElementById","userNode","appNode","footerNode","clickSound","version","Spinner","React","className","Forms","restrictions","statusMessages","Failure","props","msg","openAListRequest","aList","onClick","reduxConfig","appName","actionCreator","actionCreatorFactory","addOrOpenListByNameAction","moveInitiationAction","moveToListByNameAction","moveToListAction","copyToListAction","importListAction","exportListAction","checkAndSaveAction","planWeekAction","dataConflictAction","errorAction","setMode","reloadListOfLists","reloadAList","openAList","collectPastDays","startup","deleteAList","compose","defaultProps","connect","state","app","dispatch","bindActionCreators","appActions","newListAction","async","updateListAction","refreshListAction","getListOfLists","getAList","setStatusMessage","setSelectedList","registerHotKeys","checkKeyPressed","$","on","e","disableHotKeys","off","playSound","play","reduxForm","form","listsFilter","initialValues","searchInput","_a","pageHotKeys","Field","placeholder","component","onFocus","bind","onBlur","DAYS","MONTHS","dayString","date","getDay","getMonth","getDate","dayMonthName","dayNumber","withHandlers","moveHandler","moveToList","fromList","task","toListId","fromListId","listId","copyHandler","copyToAList","moveToNewListHandler","moveToListByName","newListName","listName","move","moveToTomorrowHandler","Date","setDate","backToOldList","copyToNewListHandler","backHandler","reloadHandler","reloadListOfListsPage","withProps","pressed","String","fromCharCode","which","preventDefault","lifecycle","componentDidMount","this","componentWillUnmount","tomorrowListName","lists","substring","aria-hidden","ListsFilter","disabled","map","list","key","selectSelectedTask","selectCurrentMode","mode","selectPreviousList","hotKeyedListName","hotKeys","str","letter","n","corresponding","filter","item","length","toLowerCase","indexOf","createElement","getPreviousDays","Array","from","i","now","selectListOfLists","selectAListById","find","selectAList","selectMutableLists","immutable","selectImmutableLists","selectExportables","slice","getFilteredListOfLists","createSelector","getFormValues","listOfLists","filterForm","criteria","toLocaleLowerCase","findLegacyExists","some","includes","getCurrentMessage","status","message","searchFormValues","listSelector","appSelector","MovePage","moveToAnother","fromA","toB","toTop","trans","splice","A","B","_","unique","concat","concatTwoJSONs","json1","json2","JSON","stringify","parse","overLength","items","CONFIG","grabDate","someDateStr","toLocalTime","substr","grabTime","utcDateStr","toString","replace","toISOString","conf","instance","HTTPBaseURL","ListsTable","_super","_this","apply","arguments","contractedListItemHeader","sign","isContracted","colSpan","toggleContracted","contractedTitle","contractedListItems","displayIndentedListRow","contractedList","prepareListForDisplaying","indent","displayListRow","itemClass","action","deletable","removeList","noOfTasks","updatedDateOrTime","tasks","openList","Utils","updatedAt","displayList","isList","__extends","prototype","render","propTypes","PropTypes","array","func","isRequired","Component","makeContractableList","dashPos","used","push","ListsPage","call","listNameInput","focus","reload","goToday","planWeek","collectPastDaysRequest","forEach","k","addHotKeys","newKey","findFreeKey","keyIsNotOccupied","elem","len","pretender","startupRequest","onNameChange","setState","target","value","handleSubmit","addOrOpenAList","getAListRequest","listTitle","beContracted","newList","__assign","handleKeyDownAtListInput","keyCode","blur","immutableLists","title","width","legacyExists","onSubmit","ref","input","onKeyDown","onChange","trim","TaskList","hightlightOnDemand","element","index","highlightIndex","processTaskText","taskTruncated","taskAsDisplayed","href","rel","openListByName","displayTask","omitted","itemIndex","done","delete","procrastinate","postpone","taskListDisplayed","shouldOmit","expand","number","TasksDoneList","undone","bool","TasksPage","calculatePostponePosition","pos","Math","floor","doneTask","fromPos","moved","itemsToDo","itemsDone","dataToSave","prepareClone","lastAction","checkAndSave","serialize","unDoneTask","atPos","clearDone","removeTask","moveToTop","mark","moveOutside","data","procrastinateTask","moveToEnd","postponeTask","moveFromTo","toPos","min","changeListName","listNameOnEdit","listChanger","goLists","goPrevious","previousList","editListName","taskInput","handleHeaderSubmit","handleKeyDownAtTask","handleKeyDownAtHeader","taskToAdd","importList","exportList","makeListOption","displayImportBlock","immutables","displayExportBlock","exportables","manageHeader","headerInput","defaultValue","prepend","reloadNeeded","expandToDo","expandDone","newProps","previousAction","entity","res","listData","inputDirty","markTitle","markGlyphicon","expandToDoGlyphicon","expandDoneGlyphicon","TasksList","MODE_LOADING","MODE_LIST_OF_LISTS","ListsApp","MODE_A_LIST","TasksApp","MODE_MOVE","DATA_CONFLICT","MODE_ERROR","App","base256","val","base","substrToNum","dateString","indexStart","indexEnd","parseInt","User","style","color","process","src","createReducer","initialState","handlers","actionC","Object","hasOwnProperty","type","appReducer","userId","payload","listActions","arrToSort","sortBy","sortDesc","sort","a","b","sortArrOfObjectsByParam","statusReducer","selectedReducer","dotProp","combineReducers","AppReducer","StatusReducer","selected","formReducer","ListsServiceFactory","HTTPBase","callGetListOfList","get","then","callGetAList","callCreateAList","post","callUpdateAList","put","callDeleteAList","defaultConf","headers","host","ApiManager","baseURL","axios","create","interceptors","response","use","r","err","console","error","Promise","reject","getNewTodoListEntity","Error","apiGetListOfLists","api","apiGetAList","apiCreateAList","apiUpdateAList","apiDeleteAList","statusActions","_b","sent","originalList","addOrOpenListsByNameSaga","findOrCreateListByNameHelperSaga","generalFailure","importListSaga","first","second","utils","exportListSaga","toList","moveTaskToListSaga","removeTaskFromList","prependToAList","copyTaskToListSaga","moveToListByNameSaga","newAction","strng","jsn","prependToJSON","startupSaga","getListOfListsSagaHelper","reloadListOfListsSaga","select","currentMode","statusSelector","currentMsg","collectPastDaysSaga","listOfLists_1","todayListName_1","todayList","legacyListIds_1","collectedTasks_1","prevDayString","prevDayList_1","all","selectedActions","deleteAListSaga","isListRelevant","tryLists","planWeekSaga","protectedLists","l","shiftDate","shift","getTime","tryLists_1","append","flatMap","openAListByIdSaga","getAListSagaHelper","reloadAListSaga","appSagas","takeEvery","result","listSagas","found","RootSaga","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","onbeforeunload","store","middlewares","sagaMiddleware","createSagaMiddleware","middleware","__spreadArrays","thunk","createStore","applyMiddleware","runSaga","run","configureStore","ReactDOM","Provider","Status"],"mappings":"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","file":"static/js/main.48f6b2ac.chunk.js","sourcesContent":["export const config = {\n  devHost: 'https://akvaratodo-flask-api.herokuapp.com/',\n  // devHost: 'http://localhost:5000/',\n  // apiHost: 'https://akvaratododb.herokuapp.com/',\n  apiHost: 'https://akvaratodo-flask-api.herokuapp.com/',\n  separatorString: '..................',\n  listsAddon: 'lists',\n  settingsAddon: 'settings',\n  user: {\n    id: 1,\n    name: 'akvara',\n    settings: {\n      openListIfExists: 'Current',\n      addNewAt: 4,\n      displayListLength: 15,\n      displayDoneLength: 3,\n      displayLast: 2,\n    },\n  },\n  statusNode: document.getElementById('status'),\n  userNode: document.getElementById('user'),\n  appNode: document.getElementById('app'),\n  footerNode: document.getElementById('footer'),\n  clickSound: 'https://www.soundjay.com/buttons/button-20.mp3',\n  version: '0326-18',\n};\n\nexport default config;\n","export enum appModes {\n  MODE_LOADING = 'LOADING',\n  MODE_ERROR = 'ERROR',\n  MODE_LIST_OF_LISTS = 'LIST_OF_LISTS',\n  MODE_A_LIST = 'A_LIST',\n  MODE_MOVE = 'MOVE',\n  DATA_CONFLICT = 'DATA_CONFLICT',\n}\n\nexport const restrictions = {\n  maxTaskLength: 180,\n  collectDaysBefore: 7,\n};\n\nexport const statusMessages = {\n  msgHello: 'Hello!',\n  msgPlanAWeek: 'Planing a week ...',\n  msgChecking: 'Checking ...',\n  msgAdding: 'Adding ...',\n  msgSaved: 'Saved.',\n  msgMoved: 'Item moved.',\n  msgCopied: 'Item copied.',\n  msgExported: 'List exported.',\n  msgImported: 'List imported.',\n  msgAddedAndRefreshed: 'Item added and list refreshed.',\n  msgDataConflict: 'Data conflict.',\n  msgLoadingLists: 'Loading lists ...',\n  msgLoadingAList: 'Loading a list ...',\n  msgListsLoaded: 'Lists loaded.',\n  msgTodaysLoaded: 'Today\\'s list loaded.',\n  msgLoaded: ' loaded.',\n  msgCreatingAList: 'Creating a list: ',\n  msgDeletingAList: 'Deleting a list ...',\n  msgListDeleted: 'List removed.',\n  msgWeekPlanned: 'A week ahead added.',\n};\n\nexport const secsPerDay = 864e5;\n","import * as React from 'react';\n\nimport './spinner.css';\n\nconst Spinner: React.FunctionComponent<{}> = () => <div className=\"spinner\">Loading...</div>;\n\nexport default Spinner;\n","export enum Forms {\n  listsFilter = 'listsFilter',\n}\n","import * as React from 'react';\nimport { defaultProps } from 'recompose';\n\nimport { TodoList } from '../../store/types';\nimport { appActions } from '../../store/actions';\n\nexport interface FailureProps {\n  msg: string;\n}\n\ninterface FailurePrivateProps extends FailureProps {\n  openAListRequest: typeof appActions.openAList;\n  aList: TodoList;\n}\n\nconst Failure: React.FunctionComponent<FailurePrivateProps> = (props) => {\n  const { msg, openAListRequest, aList } = props;\n  return (\n    <div>\n      <br />\n      {msg}\n      <br />\n      Please <button onClick={() => openAListRequest(aList.id)}>reload</button>\n    </div>\n  );\n};\n\nexport default Failure;\n","const reduxConfig = {\n  appName: 'app',\n};\n\nexport default reduxConfig;\n","import { actionCreatorFactory } from 'typescript-fsa';\n\nimport reduxConfig from '../config';\nimport { ListNameOnly, TodoListCopy, TodoListImpEx, TodoListMove, TodoListMoveByName } from '../types';\n\nconst actionCreator = actionCreatorFactory(reduxConfig.appName + '/app');\n\nexport const addOrOpenListByNameAction = actionCreator<ListNameOnly>('ADD_OR_OPEN_LIST');\nexport const moveInitiationAction = actionCreator<{}>('MOVE_INITIATED');\nexport const moveToListByNameAction = actionCreator<TodoListMoveByName>('MOVE_BY_NAME');\nexport const moveToListAction = actionCreator<TodoListMove>('MOVE_TO');\nexport const copyToListAction = actionCreator<TodoListCopy>('COPY_TO');\nexport const importListAction = actionCreator<TodoListImpEx>('IMPORT_LIST');\nexport const exportListAction = actionCreator<TodoListImpEx>('EXPORT_LIST');\nexport const checkAndSaveAction = actionCreator<{}>('CHECK_AND_SAVE');\nexport const planWeekAction = actionCreator<{}>('PLAN_WEEK');\nexport const dataConflictAction = actionCreator<{}>('DATA_CONFLICT');\nexport const errorAction = actionCreator<{}>('ERROR');\n// New, correct\nexport const setMode = actionCreator<string>('SET_MODE');\nexport const reloadListOfLists = actionCreator<void>('RELOAD_LISTS');\nexport const reloadAList = actionCreator<string>('RELOAD_A_LIST');\nexport const openAList = actionCreator<string>('OPEN_A_LIST');\nexport const collectPastDays = actionCreator<void>('COLLECT_PAST');\nexport const startup = actionCreator<void>('STARTUP');\nexport const deleteAList = actionCreator<string>('DELETE_A_LIST');\n","import * as React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect, Dispatch } from 'react-redux';\nimport { compose, defaultProps } from 'recompose';\n\nimport { RootState } from '../../store/reducers';\nimport Failure, { FailureProps } from './Failure';\nimport * as appActions from '../../store/app/app.actions';\n\nconst mapStateToProps = (state: RootState) => ({\n  aList: state.app.aList,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootState>) => {\n  return bindActionCreators(\n    {\n      openAListRequest: appActions.openAList,\n    },\n    dispatch,\n  );\n};\n\nexport default compose<FailureProps>(\n  defaultProps({\n    msg: 'Ooops, something went wrong...',\n  }),\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n)(Failure);\n","import { actionCreatorFactory } from 'typescript-fsa';\n\nimport reduxConfig from '../config';\nimport { TodoList } from '../types';\n\nconst actionCreator = actionCreatorFactory(reduxConfig.appName + '/list');\n\nexport const newListAction = actionCreator.async<{}, any>('NEW_LIST');\nexport const updateListAction = actionCreator.async<{}, any>('UPDATE_LIST');\nexport const refreshListAction = actionCreator.async<any, {}>('REFRESH_LIST');\n// New, correct\nexport const getListOfLists = actionCreator.async<void, TodoList[]>('GET_LIST_OF_LISTS');\nexport const getAList = actionCreator.async<string, TodoList>('GET_A_LIST');\n","import { actionCreatorFactory } from 'typescript-fsa';\n\nimport reduxConfig from '../config';\n\nconst actionCreator = actionCreatorFactory(reduxConfig.appName + '/status');\n\nexport const setStatusMessage = actionCreator<string>('SET_STATUS_MESSAGE');\n","import actionCreatorFactory from 'typescript-fsa';\nimport reduxConfig from '../config';\n\nconst actionCreator = actionCreatorFactory(reduxConfig.appName + '/selected');\n\nexport const setSelectedList = actionCreator<number | null>('SET_SELECTED_LIST');\n","import $ from 'jquery';\n\nexport const registerHotKeys = (checkKeyPressed) => {\n  $(document).on('keypress', (e) => checkKeyPressed(e));\n};\n\nexport const disableHotKeys = () => {\n  $(document).off('keypress');\n};\n\nexport const playSound = () => {\n  let sound = document.getElementById('clickSound') as HTMLAudioElement;\n  sound.play();\n};\n","import * as React from 'react';\nimport { compose, withProps } from 'recompose';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { Forms } from '../../../store/forms';\nimport { disableHotKeys, registerHotKeys } from '../../../utils/hotkeys';\n\nexport interface ListsFilterProps {\n  pageHotKeys: () => void;\n}\n\ninterface ListsFilterPrivateProps extends ListsFilterProps {}\n\nconst ListsFilterInput: React.FunctionComponent<ListsFilterPrivateProps> = ({ pageHotKeys }) => {\n  return (\n    <Field\n      className=\"list-input\"\n      name=\"searchInput\"\n      placeholder={''}\n      component=\"input\"\n      onFocus={disableHotKeys.bind(this)}\n      onBlur={registerHotKeys.bind(this, pageHotKeys)}\n    />\n  );\n};\n\nexport default compose<ListsFilterPrivateProps, ListsFilterProps>(\n  // withForwardedRef,\n  reduxForm({\n    form: Forms.listsFilter,\n    initialValues: {\n      searchInput: '',\n    },\n  }),\n)(ListsFilterInput);\n","export const DAYS = [\n  'Sekmadienį',\n  'Pirmadienį',\n  'Antradienį',\n  'Trečiadienį',\n  'Ketvirtadienį',\n  'Penktadienį',\n  'Šeštadienį',\n];\n\nexport const MONTHS = [\n  'sausio',\n  'vasario',\n  'kovo',\n  'balandžio',\n  'gegužės',\n  'birželio',\n  'liepos',\n  'rugpjūčio',\n  'rugsėjo',\n  'spalio',\n  'lapkričio',\n  'gruodžio',\n];\n","import { DAYS, MONTHS } from '../locale/lt';\n\nexport const dayString = (date: Date) => `${DAYS[date.getDay()]}, ${MONTHS[date.getMonth()]} ${date.getDate()} d.`;\nexport const dayWeekName = (date: Date) => DAYS[date.getDay()].toLowerCase();\nexport const dayMonthName = (date: Date) => MONTHS[date.getMonth()];\nexport const dayNumber = (date: Date) => date.getDate();\n","import * as React from 'react';\nimport { compose, lifecycle, withHandlers, withProps } from 'recompose';\n\nimport { disableHotKeys, playSound, registerHotKeys } from '../../utils/hotkeys';\nimport { ListCreds, TodoList } from '../../store/types';\nimport { appActions } from '../../store/actions';\nimport { config } from '../../config/config';\nimport ListsFilter from './ListsFilter';\nimport { restrictions } from '../../config/constants';\nimport { dayString } from '../../utils/calendar';\n\nexport interface MovePageProps {\n  task: string;\n  lists: TodoList[];\n  fromList: ListCreds;\n  openAList: typeof appActions.openAList;\n  moveToList: typeof appActions.moveToListAction;\n  moveToListByName: typeof appActions.moveToListByNameAction;\n  copyToAList: typeof appActions.copyToListAction;\n  reloadListOfListsPage: typeof appActions.reloadListOfLists;\n  newListName: string;\n  tomorrowListName: string;\n}\n\ninterface MovePageHandlers {\n  moveHandler: (toListId: string) => void;\n  copyHandler: (toListId: string) => void;\n  moveToNewListHandler: () => void;\n  moveToTomorrowHandler: () => void;\n  copyToNewListHandler: () => void;\n  backHandler: () => void;\n  reloadHandler: () => void;\n  pageHotKeys: (e: any) => void;\n}\n\ninterface MovePagePrivateProps extends MovePageProps, MovePageHandlers {\n  pageHotKeys: (e: any) => void;\n}\n\nconst MovePage: React.FunctionComponent<MovePagePrivateProps> = (props) => {\n  const {\n    task,\n    newListName,\n    tomorrowListName,\n    lists,\n    fromList,\n    moveToNewListHandler,\n    moveToTomorrowHandler,\n    copyToNewListHandler,\n    moveHandler,\n    copyHandler,\n    backHandler,\n    reloadHandler,\n    pageHotKeys,\n  } = props;\n\n  return (\n    <>\n      <hr />\n      <h2>{task.substring(0, restrictions.maxTaskLength)}</h2>\n      <hr />\n      <button onClick={backHandler}>\n        {'<'} Back to {fromList.name}\n      </button>{' '}\n      <button onClick={reloadHandler}>\n        <span className={'glyphicon glyphicon-refresh'} aria-hidden=\"true\" /> <u>R</u>eload\n      </button>{' '}\n      <button onClick={moveToTomorrowHandler}>\n        {tomorrowListName}\n      </button>\n      <hr />\n      <ListsFilter pageHotKeys={pageHotKeys} />\n      <button disabled={!newListName} onClick={moveToNewListHandler}>\n        Move to new list\n      </button>{' '}\n      <button disabled={!newListName} onClick={copyToNewListHandler}>\n        Copy to new list\n      </button>\n      <hr />\n      <table className=\"table table-hover\">\n        <tbody>\n          {lists.map((list) =>\n            list.id === fromList.listId ? null : (\n              <tr key={'tr' + list.id}>\n                <td>\n                  To: <strong>{list.name}</strong>\n                </td>\n                <td>\n                  <button onClick={() => moveHandler(list.id)}>Move</button>{' '}\n                  <button onClick={() => copyHandler(list.id)}>Copy</button>\n                </td>\n              </tr>\n            ),\n          )}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default compose<MovePagePrivateProps, MovePageProps>(\n  withHandlers<MovePagePrivateProps, MovePageHandlers>({\n    moveHandler: ({ moveToList, fromList, task }) => (toListId) => {\n      moveToList({ fromListId: fromList.listId, toListId, task });\n    },\n    copyHandler: ({ copyToAList, task }) => (toListId) => {\n      copyToAList({ toListId, task });\n    },\n    moveToNewListHandler: ({ moveToListByName, fromList, task, newListName }) => () => {\n      moveToListByName({\n        fromListId: fromList.listId,\n        task,\n        listName: newListName,\n        move: true,\n      });\n    },\n    moveToTomorrowHandler: ({ moveToListByName, fromList, task }) => () => {\n      moveToListByName({\n        fromListId: fromList.listId,\n        task,\n        listName: dayString(new Date(new Date().setDate(new Date().getDate() + 1))),\n        move: true,\n        backToOldList: true,\n      });\n    },\n    copyToNewListHandler: ({ moveToListByName, fromList, task, newListName }) => () => {\n      moveToListByName({\n        fromListId: fromList.listId,\n        task,\n        listName: newListName,\n        move: false,\n      });\n    },\n    backHandler: ({ openAList, fromList }) => () => {\n      openAList(fromList.listId);\n    },\n    reloadHandler: ({ reloadListOfListsPage }) => () => {\n      reloadListOfListsPage();\n    },\n  }),\n  withProps(({ reloadHandler, backHandler }) => ({\n    pageHotKeys: (e) => {\n      const pressed = String.fromCharCode(e.which);\n\n      if (pressed === 'r') {\n        e.preventDefault();\n        playSound();\n        reloadHandler();\n        return;\n      }\n      if (pressed === '<') {\n        e.preventDefault();\n        playSound();\n        backHandler();\n        return;\n      }\n    },\n  })),\n  lifecycle<MovePagePrivateProps, {}>({\n    componentDidMount() {\n      registerHotKeys(this.props.pageHotKeys);\n    },\n    componentWillUnmount() {\n      disableHotKeys();\n    },\n  }),\n)(MovePage);\n","import { getFormValues } from 'redux-form';\n\nimport { RootState } from '../reducers';\nimport { ListCreds } from '../types';\n\nexport const selectSelectedTask = (state: RootState): string => state.app.task;\nexport const selectCurrentMode = (state: RootState): string => state.app.mode;\n// ToDo: Move to Selected\nexport const selectPreviousList = (state: RootState): ListCreds | null =>\n  state.app.fromList && state.app.aList.id === state.app.fromList.listId ? null : state.app.fromList;\n","import React from 'react';\nimport { HotKey } from '../store/types';\nimport { restrictions, secsPerDay } from '../config/constants';\nimport { dayString } from './calendar';\n\n/**\n *  Returns string with underlined first of given letter\n *\n */\nexport const strongify = (str: string, letter: string) => {\n  const n = str.toLowerCase().indexOf(letter);\n\n  if (n === -1) {\n    return str;\n  }\n\n  return (\n    <span>\n      {str.substring(0, n)}\n      <u>{str.substring(n, n + 1)}</u>\n      {str.substring(n + 1, str.length)}\n    </span>\n  );\n};\n\nexport const hotKeyedListName = (listName: string, hotKeys: HotKey[]) => {\n  if (!hotKeys) {\n    return listName;\n  }\n\n  const corresponding = hotKeys.filter((item) => item.listName === listName);\n\n  if (!corresponding.length) {\n    return listName;\n  }\n\n  return strongify(listName, corresponding[0].key);\n};\n\nexport const getPreviousDays = () =>\n  Array.from({ length: restrictions.collectDaysBefore }, (e, i) =>\n    dayString(new Date(Date.now() - secsPerDay * (i + 1))),\n  );\n","import { createSelector } from 'reselect';\nimport { getFormValues } from 'redux-form';\n\nimport { RootState } from '../reducers';\nimport { TodoList } from '../types';\nimport { Forms } from '../forms';\nimport { filterByString } from '../../utils/filterUtils';\nimport { getPreviousDays } from '../../utils/stringUtils';\n\nexport const selectListOfLists = (state: RootState): TodoList[] => state.app.lists;\n\nexport const selectAListById = (listId: string) => (state: RootState): TodoList | null =>\n  state.app.lists.find((list) => list.id === listId) || null;\n\nexport const selectAList = (state: RootState): TodoList => state.app.aList;\n\nexport const selectMutableLists = (state: RootState): TodoList[] =>\n  state.app.lists.filter((item: TodoList) => !item.immutable);\n\nexport const selectImmutableLists = (state: RootState): TodoList[] =>\n  state.app.lists.filter((item: TodoList) => item.immutable);\n\nexport const selectExportables = (state: RootState): TodoList[] =>\n  state.app.lists.filter((item) => item.id !== state.app.aList.id && !item.immutable).slice(0, 20);\n\nexport const getFilteredListOfLists = createSelector(\n  [selectMutableLists, getFormValues(Forms.listsFilter)],\n  (listOfLists, filterForm: any): TodoList[] =>\n    filterForm ? listOfLists.filter((list) => filterByString(list.name, filterForm.searchInput)) : listOfLists,\n);\n\nexport const findLegacyExists = (state: RootState): boolean =>\n  state.app.lists.some((aList) =>  getPreviousDays().includes(aList.name));\n","export const filterByString = (str: string = '', criteria: string) =>\n  str.toLocaleLowerCase().indexOf(criteria.toLocaleLowerCase()) > -1;\n","import { getFormValues } from 'redux-form';\n\nimport { RootState } from '../reducers';\n\nexport const getCurrentMessage = (state: RootState): string => state.status.message;\n","import { bindActionCreators, compose } from 'redux';\nimport { connect, Dispatch } from 'react-redux';\nimport { getFormValues } from 'redux-form';\n\nimport { appActions } from '../../store/actions';\nimport { RootState } from '../../store/reducers';\nimport MovePage from './MovePage';\nimport { appSelector, listSelector } from '../../store/selectors';\nimport { Forms } from '../../store/forms';\nimport { dayString } from '../../utils/calendar';\n\nconst mapStateToProps = (state: RootState) => {\n  const searchFormValues = getFormValues(Forms.listsFilter)(state);\n  return {\n    lists: listSelector.getFilteredListOfLists(state),\n    task: appSelector.selectSelectedTask(state),\n    fromList: state.app.fromList,\n    newListName: searchFormValues ? searchFormValues.searchInput : '',\n    tomorrowListName: dayString(new Date(new Date().setDate(new Date().getDate() + 1))),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootState>) => {\n  return bindActionCreators(\n    {\n      openAList: appActions.openAList,\n      moveToListByName: appActions.moveToListByNameAction,\n      moveToList: appActions.moveToListAction,\n      copyToAList: appActions.copyToListAction,\n      reloadListOfListsPage: appActions.reloadListOfLists,\n    },\n    dispatch,\n  );\n};\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n)(MovePage);\n","import _ from 'underscore';\nimport CONFIG from '../config/config.js';\n\nexport const sortArrOfObjectsByParam = (arrToSort, sortBy, sortDesc) => {\n  if (!sortDesc) {\n    return arrToSort.sort(function(a, b) {\n      return a[sortBy] < b[sortBy] ? -1 : 1;\n    });\n  } else {\n    return arrToSort.sort(function(a, b) {\n      return a[sortBy] > b[sortBy] ? -1 : 1;\n    });\n  }\n};\n\nexport const moveToAnother = (fromA, toB, i, toTop) => {\n  let trans = fromA[i];\n  fromA.splice(i, 1);\n  if (toTop) {\n    toB = _.unique([trans].concat(toB));\n  } else {\n    toB = _.unique(toB.concat([trans]));\n  }\n\n  return { A: fromA, B: toB };\n};\n\nexport const moveToEnd = (items, i) => {\n  let trans = items[i];\n  items.splice(i, 1);\n\n  return items.concat([trans]);\n};\n\nexport const moveToTop = (items, i) => {\n  let trans = items[i];\n  items.splice(i, 1);\n\n  return [trans].concat(items);\n};\n\nexport const moveFromTo = (items, fromPos, toPos) => {\n  let trans = items[fromPos];\n  items.splice(fromPos, 1);\n  items.splice(toPos, 0, trans);\n\n  return items;\n};\n\nexport const removeItem = (items, i) => {\n  items.splice(i, 1);\n\n  return items;\n};\n\nexport const concatTwoJSONs = (json1, json2) => {\n  return JSON.stringify(_.unique(JSON.parse(json1).concat(JSON.parse(json2))));\n};\n\nexport const prependToJSON = (strng, jsn) => {\n  return JSON.stringify(_.unique([strng].concat(JSON.parse(jsn))));\n};\n\nexport const removeTask = (strng, jsn) => {\n  return JSON.stringify(JSON.parse(jsn).filter((item) => item !== strng));\n};\n\nexport const overLength = (which, items) => {\n  return items.length > CONFIG.user.settings[which];\n};\n\nexport const grabDate = (someDateStr) => {\n  return toLocalTime(someDateStr).substr(0, 10);\n};\n\nexport const grabTime = (someDateStr) => {\n  return toLocalTime(someDateStr).substr(11, 5);\n};\n\nexport const toLocalTime = (utcDateStr) => {\n  return new Date(new Date(utcDateStr).toString().replace(/GMT.*/g, '') + ' UTC').toISOString();\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as Utils from '../utils/utils.js';\nimport { hotKeyedListName } from '../utils/stringUtils';\n\nclass ListsTable extends Component {\n  static propTypes = {\n    hotKeys: PropTypes.array,\n    lists: PropTypes.array,\n    openList: PropTypes.func.isRequired,\n    removeList: PropTypes.func,\n  };\n\n  contractedListItemHeader = (list, i) => {\n    let sign = 'glyphicon-minus';\n    if (list.isContracted) {\n      sign = 'glyphicon-plus';\n    }\n    return (\n      <tr key={'tr' + i}>\n        <td colSpan={2} onClick={this.props.toggleContracted.bind(this, list.contractedTitle, !list.isContracted)}>\n          <span className={'glyphicon list-item list-item-glyph glyphicon ' + sign} aria-hidden=\"true\" />\n          {list.contractedTitle}\n        </td>\n        <td className=\"right-align\">\n          <strong>{list.list.length}</strong>\n        </td>\n      </tr>\n    );\n  };\n\n  contractedListItems = (list) => {\n    if (list.isContracted) {\n      return null;\n    }\n    return list.list.map(this.displayIndentedListRow);\n  };\n\n  contractedList = (list, i) => {\n    return [this.contractedListItemHeader(list, i), this.contractedListItems(list, i)];\n  };\n\n  displayIndentedListRow = (list, i) => {\n    let item = this.prepareListForDisplaying(list);\n    item.indent = true;\n    return this.displayListRow(item, i);\n  };\n\n  displayListRow = (list, i) => (\n    <tr key={'tr' + i}>\n      <td className={list.itemClass} onClick={list.action}>\n        {list.indent && (\n          <span className={'glyphicon list-item list-item-glyph'} aria-hidden=\"true\">\n            {' '}\n          </span>\n        )}\n        <span className={'glyphicon list-item list-item-glyph glyphicon-folder-open'} aria-hidden=\"true\" />\n        {list.name}\n      </td>\n      <td className=\"actions\">\n        {list.deletable && (\n          <span\n            className=\"glyphicon glyphicon-trash action-button\"\n            aria-hidden=\"true\"\n            onClick={this.props.removeList.bind(this, list.id)}\n          />\n        )}\n      </td>\n      <td className=\"right-align\">\n        <span>(<strong>{list.noOfTasks}</strong>)</span>\n        <span className='less-useful'>{list.updatedDateOrTime}</span>\n      </td>\n    </tr>\n  );\n\n  prepareListForDisplaying = (list) => {\n    let item = {\n      id: list.id,\n      tasks: list.tasks,\n      noOfTasks: list.tasks ? JSON.parse(list.tasks).length : 0,\n      name: hotKeyedListName(list.name, this.props.hotKeys),\n      itemClass: 'list-item',\n      action: this.props.openList.bind(this, list.id, list.name),\n      deletable: list.tasks ? list.tasks === '[]' && !list.immutable : true,\n      updatedDateOrTime:\n        Utils.grabDate(new Date().toISOString()) === Utils.grabDate(list.updatedAt)\n          ? Utils.grabTime(list.updatedAt)\n          : Utils.grabDate(list.updatedAt),\n    };\n\n    if (list.immutable) {\n      item.itemClass += ' list-item-immutable';\n    }\n\n    return item;\n  };\n\n  displayList = (list, i) => {\n    if (list.isList) {\n      return this.contractedList(list, i);\n    }\n    const item = this.prepareListForDisplaying(list);\n\n    return this.displayListRow(item, i);\n  };\n\n  render() {\n    return (\n      <table className=\"table table-hover\">\n        <tbody>{this.props.lists.map(this.displayList)}</tbody>\n      </table>\n    );\n  }\n}\n\nexport default ListsTable;\n","import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\n\nconst commonHeaders = {\n  'content-type': 'application/json',\n};\n\nconst defaultConf = {\n  headers: commonHeaders,\n};\n\nexport const generateConf = (conf: AxiosRequestConfig): AxiosInstance => {\n  const instance = axios.create({ ...defaultConf, ...conf });\n  instance.interceptors.response.use(\n    function(r) {\n      return r;\n    },\n    function(err) {\n      const response = err.response;\n      console.error('API ERROR:', response);\n      return Promise.reject(response);\n    },\n  );\n  return instance;\n};\n","import ListsServiceFactory from './lists/lists.api';\nimport { generateConf } from '../axios';\n\n// export interface APIManagerConfig {\n//   userId?: string;\n// }\n\n// const config: APIManagerConfig = {};\n\ntype apiManagerParams = {\n  HTTPBaseURL: string;\n};\n\nexport const ApiManager = (params: apiManagerParams) => {\n  const { HTTPBaseURL } = params;\n  const HTTP = generateConf({ baseURL: HTTPBaseURL });\n  return {\n    lists: ListsServiceFactory({ HTTPBase: HTTP }),\n  };\n};\n","import * as React from 'react';\nimport { compose } from 'recompose';\n\nimport ListsTable from './ListsTable';\n\nimport { disableHotKeys, playSound, registerHotKeys } from '../utils/hotkeys';\nimport { TodoList } from '../store/types';\nimport { dayString } from '../utils/calendar';\nimport { appActions } from '../store/actions';\n\nexport interface ListsPageProps {\n  lists: TodoList[];\n  legacyExists: boolean;\n  getAListRequest: typeof appActions.openAList;\n  startupRequest: typeof appActions.startup;\n  addOrOpenAList: typeof appActions.addOrOpenListByNameAction;\n  removeList: typeof appActions.deleteAList;\n  planWeek: typeof appActions.planWeekAction;\n}\n\nexport interface ListsPagePrivateProps extends ListsPageProps {}\n\nconst makeContractableList = (listOfLists) => {\n  const contractedList = [];\n\n  listOfLists.map((list) => {\n    const dashPos = list.name.indexOf(' - ');\n    if (dashPos > -1) {\n      const contractedTitle = list.name.substring(0, dashPos);\n      if (!contractedList[contractedTitle]) {\n        contractedList[contractedTitle] = { used: false, list: [] };\n      }\n      contractedList[contractedTitle].list.push(list);\n    }\n    return null;\n  });\n\n  const displayList = [];\n\n  listOfLists.map((list) => {\n    const dashPos = list.name.indexOf(' - ');\n    if (dashPos > -1) {\n      const contractedTitle = list.name.substring(0, dashPos);\n      if (contractedList[contractedTitle].list.length > 1) {\n        if (!contractedList[contractedTitle].used) {\n          contractedList[contractedTitle].used = true;\n          displayList.push({\n            isList: true,\n            isContracted: true,\n            contractedTitle: contractedTitle,\n            list: contractedList[contractedTitle].list,\n          });\n        }\n      } else {\n        displayList.push(list);\n      }\n    } else {\n      displayList.push(list);\n    }\n    return null;\n  });\n  return displayList;\n};\n\nclass ListsPage extends React.PureComponent {\n  constructor(props: ListsPagePrivateProps) {\n    super(props);\n    this.state = {\n      lists: makeContractableList(props.lists.filter((list) => !list.immutable)),\n      immutableLists: props.lists.filter((list) => list.immutable),\n      listName: '',\n    };\n\n    this.hotKeys = [\n      // reserved hotkeys\n      { key: 'a' }, // \"Add\"\n      { key: 'r' }, // \"Refresh\"\n      { key: 'l' }, // \"List refresh\"\n      { key: 't' }, // \"Today\"\n      { key: 'p' }, // \"Plan\"\n      { key: '>' }, // \">>\"\n    ];\n  }\n\n  componentWillUnmount() {\n    disableHotKeys();\n  }\n\n  componentDidMount() {\n    document.title = 'ToDo lists';\n    registerHotKeys(this.checkKeyPressed.bind(this));\n  }\n\n  checkKeyPressed = (e) => {\n    const pressed = String.fromCharCode(e.which);\n    if (pressed === 'a') {\n      playSound();\n      e.preventDefault();\n      this.listNameInput.focus();\n      return;\n    }\n    if (pressed === 'r' || pressed === 'l') {\n      playSound();\n      e.preventDefault();\n      this.reload();\n      return;\n    }\n    if (pressed === 't') {\n      playSound();\n      this.goToday();\n      return;\n    }\n    if (pressed === 'p') {\n      playSound();\n      this.props.planWeek();\n      return;\n    }\n    if (pressed === '>') {\n      playSound();\n      this.props.collectPastDaysRequest();\n      return;\n    }\n    this.hotKeys.forEach(\n      function(k) {\n        if (k.key === pressed) {\n          playSound();\n          this.openAList(k.listId);\n        }\n      }.bind(this),\n    );\n  };\n\n  addHotKeys = () => {\n    this.state.lists.forEach((list) => {\n      if (!list.isList) {\n        let newKey = this.findFreeKey(list.name);\n        if (newKey) this.hotKeys.push({ key: newKey, listId: list.id, listName: list.name });\n      }\n    });\n  };\n\n  keyIsNotOccupied = (key) => !this.hotKeys.filter((elem) => elem.key === key).length;\n\n  findFreeKey = (str) => {\n    for (let i = 0, len = str.length; i < len; i++) {\n      let pretender = str[i].toLowerCase();\n      if ('abcdefghijklmnopqrstuvwxyz'.indexOf(pretender) !== -1 && this.keyIsNotOccupied(pretender)) return pretender;\n    }\n    return null;\n  };\n\n  /* Go to list of lists */\n  reload = () => {\n    this.props.startupRequest();\n  };\n\n  onNameChange = (e) => {\n    this.setState({ listName: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.addOrOpenAList({ listName: this.state.listName });\n  };\n\n  openAList = (listId) => {\n    this.props.getAListRequest(listId);\n  };\n\n  toggleContracted = (listTitle, beContracted) => {\n    const newList = this.state.lists.map((list) => {\n      if (list.isList && list.contractedTitle === listTitle) {\n        return {\n          ...list,\n          isContracted: beContracted,\n        };\n      } else {\n        return list;\n      }\n    });\n    this.setState({ lists: newList });\n  };\n\n  removeList = (listId) => {\n    this.props.removeList(listId);\n  };\n\n  handleKeyDownAtListInput = (e) => {\n    if (e.keyCode === 27) {\n      this.listNameInput.blur();\n      this.setState({\n        listName: '',\n      });\n    }\n  };\n\n  goToday = () => this.props.addOrOpenAList({ listName: dayString(new Date()) });\n\n  render() {\n    this.addHotKeys();\n    return (\n      <div>\n        <table width=\"100%\">\n          <tbody>\n            <tr>\n              <td>\n                <h1>Lists</h1>\n              </td>\n              <td className=\"right-align\">\n                {this.props.legacyExists && (\n                  <span>\n                    <button onClick={this.props.collectPastDaysRequest}> >> T</button>{' '}\n                  </span>\n                )}\n                <button onClick={this.goToday}>\n                  <u>T</u>oday\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <ListsTable\n          lists={this.state.lists}\n          openList={this.openAList}\n          toggleContracted={this.toggleContracted}\n          removeList={this.removeList}\n          hotKeys={this.hotKeys}\n        />\n        <h3>Protected</h3>\n        <ListsTable lists={this.state.immutableLists} openList={this.openAList} />\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"list-input\"\n            ref={(input) => {\n              this.listNameInput = input;\n            }}\n            value={this.state.listName}\n            onFocus={disableHotKeys.bind(this)}\n            onBlur={registerHotKeys.bind(this, this.checkKeyPressed)}\n            onKeyDown={this.handleKeyDownAtListInput}\n            onChange={this.onNameChange}\n          />\n          <button disabled={!this.state.listName.trim()}>Create new list</button>\n        </form>\n        <hr />\n        <button onClick={this.props.planWeek}>\n          <u>P</u>lan week\n        </button>\n        <button onClick={this.reload}>\n          <span className={'glyphicon glyphicon-refresh'} aria-hidden=\"true\" /> <u>R</u>eload\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ListsPage;\n","import { bindActionCreators } from 'redux';\nimport { connect, Dispatch } from 'react-redux';\nimport { compose } from 'recompose';\n\nimport { RootState } from '../../store/reducers';\nimport ListsPage, { ListsPageProps } from '../../components/ListsPage';\nimport { appActions } from '../../store/actions';\nimport { listSelector } from '../../store/selectors';\n\nconst mapStateToProps = (state: RootState) => ({\n  lists: listSelector.selectListOfLists(state),\n  legacyExists: listSelector.findLegacyExists(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootState>) => {\n  return bindActionCreators(\n    {\n      getAListRequest: appActions.openAList,\n      startupRequest: appActions.startup,\n      removeList: appActions.deleteAList,\n      addOrOpenAList: appActions.addOrOpenListByNameAction,\n      planWeek: appActions.planWeekAction,\n      collectPastDaysRequest: appActions.collectPastDays,\n    },\n    dispatch,\n  );\n};\n\nexport default compose<ListsPageProps, ListsPageProps>(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n)(ListsPage);\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CONFIG from '../config/config.js';\nimport * as Utils from '../utils/utils.js';\nimport { restrictions } from '../config/constants';\n\nclass TaskList extends React.Component {\n  static propTypes = {\n    items: PropTypes.array.isRequired,\n    done: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired,\n    toTop: PropTypes.func.isRequired,\n    move: PropTypes.func.isRequired,\n    procrastinate: PropTypes.func.isRequired,\n    postpone: PropTypes.func.isRequired,\n    openListByName: PropTypes.func.isRequired,\n    highlightIndex: PropTypes.number,\n  };\n\n  hightlightOnDemand(element, index) {\n    if (this.props.highlightIndex === index) {\n      return <strong>{element}</strong>;\n    }\n    return <span>{element}</span>;\n  }\n\n  processTaskText(task) {\n    if (task === null) task = 'null';\n    let taskTruncated = task.substring(0, restrictions.maxTaskLength),\n      taskAsDisplayed = taskTruncated;\n\n    /* If task is a link: */\n    if (task.substring(0, 4) === 'http') {\n      taskTruncated = taskTruncated.substr(taskTruncated.indexOf('://') + 3);\n      if (taskTruncated[taskTruncated.length - 1] === '/') {\n        taskTruncated = taskTruncated.substr(0, taskTruncated.length - 1);\n      }\n      taskAsDisplayed = (\n        <a href={task} target=\"_blank\" rel=\"noopener noreferrer\">\n          {taskTruncated}\n        </a>\n      );\n      return taskAsDisplayed;\n    }\n\n    /* if task is a folder: */\n    if (task.substring(0, 1) === '[') {\n      taskAsDisplayed = (\n        <span>\n          <span\n            className={'glyphicon glyphicon-folder-open list-first-item'}\n            aria-hidden=\"true\"\n            onClick={this.props.openListByName.bind(this, task.substring(1))}\n          />\n          {taskTruncated.substring(1)}\n        </span>\n      );\n    }\n\n    return taskAsDisplayed;\n  }\n\n  displayTask(task, i, omitted) {\n    if (task === CONFIG.separatorString) {\n      return (\n        <tr key={'tr' + i}>\n          <td>\n            <div className=\"task-row separator-row\">\n              <div>{CONFIG.separatorString}</div>\n              <div className=\"right-align\">{CONFIG.separatorString}</div>\n            </div>\n          </td>\n        </tr>\n      );\n    }\n\n    let itemIndex = i;\n    if (itemIndex >= CONFIG.user.settings.displayListLength - CONFIG.user.settings.displayLast) {\n      itemIndex = i + omitted;\n    }\n\n    let taskAsDisplayed = this.processTaskText(task);\n\n    if (this.props.immutable) {\n      return (\n        <tr key={'tr' + i}>\n          <td>{taskAsDisplayed}</td>\n        </tr>\n      );\n    } else {\n      return (\n        <tr key={'tr' + i}>\n          <td>\n            <div className=\"task-row\">\n                <span\n                  className=\"glyphicon glyphicon-unchecked check-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.done.bind(this, itemIndex)}\n                />\n              <div className=\"task-description\">\n                <span className=\"task\">{this.hightlightOnDemand(taskAsDisplayed, itemIndex)}</span>\n              </div>\n              <div>\n                <span\n                  className=\"glyphicon glyphicon-trash delete-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.delete.bind(this, itemIndex)}\n                />\n                <span\n                  className=\"glyphicon glyphicon-arrow-down action-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.procrastinate.bind(this, itemIndex)}\n                />\n                <span\n                  className=\"glyphicon glyphicon-arrow-up action-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.toTop.bind(this, itemIndex)}\n                />\n                <span\n                  className=\"glyphicon glyphicon-random action-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.move.bind(this, task)}\n                />\n                <span\n                  className=\"glyphicon glyphicon-thumbs-down action-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.postpone.bind(this, itemIndex)}\n                />\n              </div>\n            </div>\n          </td>\n        </tr>\n      );\n    }\n  }\n\n  render() {\n    let taskListDisplayed = this.props.items;\n    let shouldOmit = 0;\n\n    if (!this.props.expand && Utils.overLength('displayListLength', this.props.items)) {\n      shouldOmit = this.props.items.length - CONFIG.user.settings.displayListLength;\n      taskListDisplayed = this.props.items\n        .slice(0, CONFIG.user.settings.displayListLength - CONFIG.user.settings.displayLast - 1)\n        .concat([CONFIG.separatorString])\n        .concat(this.props.items.slice(-CONFIG.user.settings.displayLast));\n    }\n\n    return (\n      <table className=\"table table-condensed table-hover\">\n        <tbody>{taskListDisplayed.map((task, index) => this.displayTask(task, index, shouldOmit))}</tbody>\n      </table>\n    );\n  }\n}\n\nexport default TaskList;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CONFIG from '../config/config.js';\nimport * as Utils from '../utils/utils.js';\nimport { restrictions } from '../config/constants';\n\nclass TasksDoneList extends React.Component {\n  static propTypes = {\n    items: PropTypes.array.isRequired,\n    expand: PropTypes.bool,\n  };\n\n  /* Display one done task */\n  displayTask = (task, i) => {\n    if (!this.props.expand && i < this.props.items.length - CONFIG.user.settings.displayDoneLength) {\n      return null;\n    }\n\n    return (\n      <tr key={'tr' + i}>\n        <td>\n          <span\n            className=\"glyphicon glyphicon-ok action-button\"\n            aria-hidden=\"true\"\n            onClick={this.props.undone.bind(this, i)}\n          />\n          <span className=\"list-item task done\">{task.substring(0, restrictions.maxTaskLength)}</span>\n        </td>\n      </tr>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        {!this.props.expand && Utils.overLength('displayDoneLength', this.props.items) && CONFIG.separatorString}\n        <table className=\"table table-sm table-condensed table-hover\">\n          <tbody>{this.props.items.map(this.displayTask)}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default TasksDoneList;\n","import * as React from 'react';\nimport _ from 'underscore';\n\nimport TasksList from './TasksList';\nimport TasksDoneList from './TasksDoneList';\nimport CONFIG from '../config/config.js';\nimport { disableHotKeys, playSound, registerHotKeys } from '../utils/hotkeys';\nimport * as Utils from '../utils/utils.js';\nimport { ListCreds, SerializedTodoList, TodoList } from '../store/types';\nimport { appActions } from '../store/actions';\nimport { dayString } from '../utils/calendar';\n\nexport interface TaskPageProps {\n  lists: TodoList[];\n  aList: TodoList;\n  task: string;\n  fromList: string;\n  immutables: TodoList[];\n  exportables: TodoList[];\n  previousList: ListCreds;\n  reloadAList: typeof appActions.reloadAList;\n  startupRequest: typeof appActions.startup;\n  checkAndSave: typeof appActions.checkAndSaveAction;\n  importList: typeof appActions.importListAction;\n  exportList: typeof appActions.exportListAction;\n  addOrOpenAList: typeof appActions.addOrOpenListByNameAction;\n  moveOutside: typeof appActions.moveInitiationAction;\n}\n\ninterface TasksPageState {\n  listName: string;\n  itemsToDo: string[];\n  itemsDone: string[];\n  prepend: boolean;\n  highlightIndex: number | null;\n  lastAction: string;\n  immutable: boolean;\n  task: string;\n  reloadNeeded: boolean;\n  expandToDo: boolean;\n  listNameOnEdit: boolean;\n  expandDone: boolean;\n}\n\nclass TasksPage extends React.PureComponent<TaskPageProps, TasksPageState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      listName: props.aList.name,\n      itemsToDo: JSON.parse(props.aList.tasks),\n      itemsDone: props.aList.done ? JSON.parse(props.aList.done) : [],\n      prepend: props.prepend,\n      highlightIndex: props.prepend ? 0 : null,\n      lastAction: props.aList.lastAction,\n      immutable: props.aList.immutable,\n      task: '',\n      reloadNeeded: false,\n      listNameOnEdit: false,\n      expandToDo: false,\n      expandDone: false,\n    };\n  }\n\n  componentWillUnmount() {\n    disableHotKeys();\n  }\n\n  componentDidMount() {\n    document.title = 'ToDo lists';\n    registerHotKeys(this.checkKeyPressed.bind(this));\n  }\n\n  /* cloning State */\n  prepareClone(newProps: any) {\n    return {\n      lastAction: new Date().toISOString(),\n      listId: this.props.aList.id,\n      previousAction: this.state.lastAction,\n      ...newProps,\n    };\n  }\n\n  serialize(entity: SerializedTodoList) {\n    const res: SerializedTodoList = {\n      listId: entity.listId,\n      previousAction: entity.previousAction,\n      listData: {\n        lastAction: entity.lastAction,\n        immutable: !!entity.immutable,\n      },\n    };\n    if (entity.name) {\n      res.listData.name = entity.name;\n    }\n    if (entity.itemsToDo) {\n      res.listData.tasks = JSON.stringify(entity.itemsToDo);\n    }\n    if (entity.itemsDone) {\n      res.listData.done = JSON.stringify(entity.itemsDone);\n    }\n    if (entity.taskToAdd) {\n      res.taskToAdd = entity.taskToAdd;\n    }\n    return res;\n  }\n\n  /* Calculations */\n  readonly calculatePostponePosition = (pos: number) => Math.floor(pos / 2);\n\n  /* Show full/contracted ist */\n  readonly expand = (which: 'expandToDo' | 'expandDone') => {\n    this.setState({\n      [which]: !this.state[which],\n    } as any);\n  };\n\n  /* Move task to Done tasks array */\n  doneTask = (fromPos: number) => {\n    const moved = Utils.moveToAnother(this.state.itemsToDo, this.state.itemsDone, fromPos, false);\n    const itemsToDo = moved.A;\n    const itemsDone = moved.B;\n    const dataToSave = this.prepareClone({ itemsToDo, itemsDone });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      itemsDone: dataToSave.itemsDone,\n      highlightIndex: null,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Move task back from Done tasks array */\n  unDoneTask = (atPos: number) => {\n    const moved = Utils.moveToAnother(this.state.itemsDone, this.state.itemsToDo, atPos, true);\n    const dataToSave = this.prepareClone({ itemsToDo: moved.B, itemsDone: moved.A });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      itemsDone: dataToSave.itemsDone,\n      highlightIndex: 0,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Delete done tasks */\n  clearDone = () => {\n    const dataToSave = this.prepareClone({ itemsDone: [] });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsDone: dataToSave.itemsDone,\n      highlightIndex: null,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Remove task from list */\n  removeTask = (atPos: number) => {\n    const itemsToDo = Utils.removeItem(this.state.itemsToDo, atPos);\n    const dataToSave = this.prepareClone({ itemsToDo });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      highlightIndex: null,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Move task to top position */\n  toTop = (fromPos: number) => {\n    const itemsToDo = Utils.moveToTop(this.state.itemsToDo, fromPos);\n    const dataToSave = this.prepareClone({ itemsToDo });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      highlightIndex: 0,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Toggle immutable. No checking if changed */\n  mark = () => {\n    const dataToSave = this.prepareClone({ immutable: !this.state.immutable });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      immutable: dataToSave.immutable,\n      highlightIndex: null,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Move task to another list */\n  moveOutside = (task: string) => {\n    const data = {\n      fromList: { listId: this.props.aList.id, name: this.state.listName },\n      task,\n    };\n    this.props.moveOutside(data);\n  };\n\n  /* Move task to the end of the list */\n  readonly procrastinateTask = (fromPos: number) => {\n    const itemsToDo = Utils.moveToEnd(this.state.itemsToDo, fromPos);\n\n    const dataToSave = this.prepareClone({ itemsToDo });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      highlightIndex: this.state.itemsToDo.length,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Move task to the middle of the list */\n  readonly postponeTask = (fromPos: number) => {\n    const itemsToDo = Utils.moveFromTo(\n      this.state.itemsToDo,\n      fromPos,\n      fromPos + this.calculatePostponePosition(this.state.itemsToDo.length),\n    );\n    const dataToSave = this.prepareClone({ itemsToDo });\n\n    const highlightIndex = Math.min(\n      this.state.itemsToDo.length - 1,\n      fromPos + this.calculatePostponePosition(this.state.itemsToDo.length),\n    );\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      highlightIndex,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Change list name */\n  readonly changeListName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const dataToSave = this.prepareClone({ name: e.target.value.trim() });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      listName: dataToSave.name,\n      listNameOnEdit: false,\n      highlightIndex: null,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n    registerHotKeys(this.checkKeyPressed.bind(this));\n  };\n\n  /* Go to another list */\n  listChanger = (listName: string) => {\n    this.props.addOrOpenAList({ listName });\n  };\n\n  /* Reload this list */\n  reload = () => {\n    this.props.reloadAList(this.props.aList.id);\n  };\n\n  /* Go to today's list */\n  goToday = () => {\n    this.props.addOrOpenAList({ listName: dayString(new Date()) });\n  };\n\n  /* Go to lists */\n  goLists = () => {\n    this.props.startupRequest();\n  };\n\n  /* Go to previous lists */\n  goPrevious = () => {\n    this.listChanger(this.props.previousList.name);\n  };\n\n  /* Mode: List name is on edit */\n  editListName = () => {\n    this.setState({\n      listNameOnEdit: true,\n    });\n  };\n\n  checkKeyPressed = (e) => {\n    switch (String.fromCharCode(e.which)) {\n      case 'a':\n        playSound();\n        e.preventDefault();\n        // @ts-ignore\n        this.taskInput.focus();\n        break;\n      case 'l':\n        playSound();\n        this.goLists();\n        break;\n      case 'r':\n        playSound();\n        this.reload();\n        break;\n      case 'p':\n        playSound();\n        this.mark();\n        break;\n      case 't':\n        playSound();\n        this.goToday();\n        break;\n      case '<':\n        if (this.props.previousList.listId) {\n          playSound();\n          this.goPrevious();\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  /* Edit header submit */\n  handleHeaderSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n  };\n\n  handleKeyDownAtTask = (e: React.KeyboardEvent) => {\n    if (e.keyCode === 27) {\n      // @ts-ignore\n      this.taskInput.blur();\n      this.setState({\n        task: '',\n      });\n    }\n  };\n\n  /* Edit header keypress */\n  handleKeyDownAtHeader = (e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'Enter':\n      case 'Tab':\n        this.changeListName(e);\n        break;\n      case 'Escape':\n        this.setState({ listNameOnEdit: false });\n        break;\n      default:\n        break;\n    }\n  };\n\n  /* New task submit */\n  handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // @ts-ignore\n    this.taskInput.blur();\n\n    const highlightIndex = Math.min(this.state.itemsToDo.length, CONFIG.user.settings.addNewAt - 1);\n    const taskToAdd = this.state.task.replace(/(^\\s+|\\s+$)/g, '');\n    let itemsToDo = this.state.itemsToDo;\n    itemsToDo.splice(CONFIG.user.settings.addNewAt - 1, 0, taskToAdd);\n    itemsToDo = _.unique(itemsToDo);\n    const dataToSave = this.prepareClone({ itemsToDo, taskToAdd });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      highlightIndex,\n      task: '',\n    });\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* User input */\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ task: e.target.value });\n  };\n\n  importList = (listId: string) => {\n    this.props.importList({\n      fromListId: listId,\n      toListId: this.props.aList.id,\n    });\n  };\n\n  exportList = (listId: string) => {\n    this.props.exportList({\n      fromListId: this.props.aList.id,\n      toListId: listId,\n    });\n  };\n\n  makeListOption = (list: TodoList) => (\n    <option key={'o-' + list.id} value={list.id}>\n      {list.name}\n    </option>\n  );\n\n  /* Select for loading tasks from another list */\n  displayImportBlock = () => {\n    if (this.state.immutable) {\n      return null;\n    }\n\n    return (\n      <select\n        className=\"import-select\"\n        onChange={(e) => {\n          if (e.target.value) {\n            this.importList(e.target.value);\n          }\n        }}\n      >\n        <option value=\"\">Import list</option>\n        {this.props.immutables.map((list) => this.makeListOption(list))}\n      </select>\n    );\n  };\n\n  /* Select for exporting tasks to another list */\n  displayExportBlock = () => {\n    if (this.state.immutable) {\n      return null;\n    }\n\n    return (\n      <select\n        className=\"import-select\"\n        onChange={(e) => {\n          if (e.target.value) {\n            this.exportList(e.target.value);\n          }\n        }}\n      >\n        <option value=\"\">Export to</option>\n        {this.props.exportables.map((list) => this.makeListOption(list))}\n      </select>\n    );\n  };\n\n  /* Header - edit mode or not */\n  manageHeader = () => {\n    if (!this.state.listNameOnEdit) {\n      return (\n        <div>\n          <h1>{this.state.listName}</h1>{' '}\n          <span\n            className={'small action-button glyphicon glyphicon glyphicon-pencil'}\n            aria-hidden=\"true\"\n            onClick={this.editListName}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <h1>\n        <form onSubmit={this.handleHeaderSubmit}>\n          <input\n            ref={(input) => {\n              // @ts-ignore\n              this.headerInput = input;\n            }}\n            className=\"task-input\"\n            defaultValue={this.state.listName}\n            onFocus={disableHotKeys}\n            onKeyDown={this.handleKeyDownAtHeader}\n            onBlur={this.changeListName}\n          />\n        </form>\n      </h1>\n    );\n  };\n\n  render() {\n    const inputDirty = !!this.state.task.trim();\n    const markTitle = this.state.immutable ? (\n        <span>\n          Un<u>p</u>rotect\n        </span>\n      ) : (\n        <span>\n          <u>P</u>rotect\n        </span>\n      ),\n      markGlyphicon = this.state.immutable ? 'screen-shot' : 'exclamation-sign',\n      expandToDoGlyphicon = this.state.expandToDo ? 'glyphicon-resize-small' : 'glyphicon-resize-full',\n      expandDoneGlyphicon = this.state.expandDone ? 'glyphicon-resize-small' : 'glyphicon-resize-full';\n    return (\n      <div>\n        {this.manageHeader()}\n        <h3>\n          Finished ({this.state.itemsDone.length})\n          {Utils.overLength('displayDoneLength', this.state.itemsDone) && (\n            <span\n              className={'small action-button glyphicon ' + expandDoneGlyphicon}\n              aria-hidden=\"true\"\n              onClick={this.expand.bind(this, 'expandDone')}\n            />\n          )}\n          {'  '}\n          {this.state.itemsDone.length > 0 && (\n            <span\n              className=\"small action-button glyphicon glyphicon-trash\"\n              aria-hidden=\"true\"\n              onClick={this.clearDone}\n            />\n          )}\n        </h3>\n        <TasksDoneList items={this.state.itemsDone} undone={this.unDoneTask} expand={this.state.expandDone} />\n        <hr />\n        <h3>\n          Remaining ({this.state.itemsToDo.length})\n          {Utils.overLength('displayListLength', this.state.itemsToDo) && (\n            <span\n              className={'small list-item action-button glyphicon ' + expandToDoGlyphicon}\n              aria-hidden=\"true\"\n              onClick={this.expand.bind(this, 'expandToDo')}\n            />\n          )}\n        </h3>\n        <TasksList\n          items={this.state.itemsToDo}\n          highlightIndex={this.state.highlightIndex}\n          immutable={this.state.immutable}\n          delete={this.removeTask}\n          move={this.moveOutside}\n          toTop={this.toTop}\n          postpone={this.postponeTask}\n          procrastinate={this.procrastinateTask}\n          openListByName={this.listChanger}\n          reloadNeeded={this.state.reloadNeeded}\n          done={this.doneTask}\n          expand={this.state.expandToDo}\n        />\n        {!this.state.immutable && (\n          <div>\n            <hr />\n            <h3>Add new:</h3>\n            <form onSubmit={this.handleSubmit}>\n              <input\n                className=\"task-input\"\n                ref={(input) => {\n                  // @ts-ignore\n                  this.taskInput = input;\n                }}\n                value={this.state.task}\n                onFocus={disableHotKeys}\n                onBlur={() => registerHotKeys(this.checkKeyPressed)}\n                onKeyDown={this.handleKeyDownAtTask}\n                onChange={this.onChange}\n              />\n              <button disabled={!this.state.task.trim()}>Add task</button>\n            </form>\n          </div>\n        )}\n        <hr />\n        {this.displayImportBlock()}\n        {this.displayExportBlock()}\n        <br />\n        <button disabled={inputDirty} onClick={this.reload}>\n          <span className={'glyphicon glyphicon-refresh'} aria-hidden=\"true\" /> <u>R</u>eload\n        </button>\n        <button disabled={inputDirty} onClick={this.mark}>\n          <span className={'glyphicon glyphicon-' + markGlyphicon} aria-hidden=\"true\" /> {markTitle}\n        </button>\n        <button disabled={inputDirty} onClick={this.goLists}>\n          <span className=\"glyphicon glyphicon-tasks\" aria-hidden=\"true\" /> <u>L</u>ists\n        </button>\n        <button disabled={inputDirty} onClick={this.goToday}>\n          <span className=\"glyphicon glyphicon-subscript\" aria-hidden=\"true\" /> <u>T</u>oday\n        </button>\n        {this.props.previousList && this.props.previousList.listId && (\n          <button disabled={inputDirty} onClick={this.goPrevious}>\n            <span className=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\" /> {this.props.previousList.name}\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TasksPage;\n","import { bindActionCreators } from 'redux';\nimport { connect, Dispatch } from 'react-redux';\nimport { compose } from 'recompose';\n\nimport { RootState } from '../../store/reducers';\nimport { appActions } from '../../store/actions';\nimport TasksPage from '../../components/TasksPage';\nimport { appSelector, listSelector } from '../../store/selectors';\n\nconst mapStateToProps = (state: RootState) => ({\n  lists: listSelector.selectListOfLists(state),\n  aList: listSelector.selectAList(state),\n  task: state.app.task,\n  fromList: state.app.fromList,\n  immutables: listSelector.selectImmutableLists(state),\n  exportables: listSelector.selectExportables(state),\n  previousList: appSelector.selectPreviousList(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootState>) => {\n  return bindActionCreators(\n    {\n      reloadAList: appActions.reloadAList,\n      startupRequest: appActions.startup,\n      checkAndSave: appActions.checkAndSaveAction,\n      importList: appActions.importListAction,\n      exportList: appActions.exportListAction,\n      addOrOpenAList: appActions.addOrOpenListByNameAction,\n      moveOutside: appActions.moveInitiationAction,\n    },\n    dispatch,\n  );\n};\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n)(TasksPage);\n","import * as React from 'react';\nimport { compose, lifecycle } from 'recompose';\n\nimport Spinner from '../shared/Spinner';\nimport { appModes } from '../config/constants';\nimport { appActions } from '../store/actions';\nimport Failure from './Failure';\nimport MovePage from './MovePage';\nimport ListsApp from './ListsApp';\nimport TasksApp from './TasksApp';\nimport { TodoList } from '../store/types';\n\nexport interface AppProps {\n  mode: string;\n  lists: TodoList[];\n  aList: TodoList;\n}\n\ninterface AppContainerProps extends AppProps {\n  startupRequest: typeof appActions.startup;\n}\n\nconst App: React.FunctionComponent<AppProps> = (props) => {\n  const { mode } = props;\n  // const { mode, lists, aList } = props;\n  // console.log('-****- App: lists', lists);\n  // console.log('-****- App: aList', aList);\n\n  if (!mode) {\n    return <div className=\"error\">Mode undefined!</div>;\n  }\n\n  if (mode === appModes.MODE_LOADING) {\n    return <Spinner />;\n  }\n\n  if (mode === appModes.MODE_LIST_OF_LISTS) {\n    return <ListsApp />;\n  }\n\n  if (mode === appModes.MODE_A_LIST) {\n    return <TasksApp />;\n  }\n\n  if (mode === appModes.MODE_MOVE) {\n    return <MovePage />;\n  }\n\n  if (mode === appModes.DATA_CONFLICT) {\n    return <Failure msg=\"Data conflict\" />;\n  }\n\n  if (mode === appModes.MODE_ERROR) {\n    return <Failure />;\n  }\n\n  return <div className=\"error\">Mode {mode} not impelemented</div>;\n};\n\nexport default compose(\n  lifecycle<AppContainerProps, {}>({\n    componentDidMount() {\n      //     if (this.props.openAtStartup) {\n      //       // Uncomment when opening list at startup is back in fashion\n      //       // this.props.dispatch(listActions.addOrOpenListByNameAction(this.props.openAtStartup));\n      //     }\n      this.props.startupRequest();\n    },\n  }),\n)(App);\n","import { connect, Dispatch } from 'react-redux';\nimport { compose } from 'recompose';\nimport { bindActionCreators } from 'redux';\n\nimport App, { AppProps } from './App';\nimport { RootState } from '../store/reducers';\nimport { appActions } from '../store/actions';\n\ninterface AppPrivateProps extends AppProps {\n  startupRequest: typeof appActions.startup;\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  mode: state.app.mode,\n  // lists: listSelector.selectListOfLists(state),\n  // aList: listSelector.selectAList(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootState>) => {\n  return bindActionCreators(\n    {\n      startupRequest: appActions.startup,\n    },\n    dispatch,\n  );\n};\n\nexport default compose<AppPrivateProps, {}>(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n)(App);\n","import * as React from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\n\nimport { RootState } from '../../store/reducers';\n\nexport interface StatusProps {\n  message: string;\n}\n\nconst Status: React.FunctionComponent<StatusProps> = ({ message }) => <div> {message}</div>;\n\nconst mapStateToProps: MapStateToProps<StatusProps, void, RootState> = (state: RootState) => ({\n  message: state.status.message,\n});\n\nexport default connect(mapStateToProps)(Status);\n","import * as React from 'react';\nimport CONFIG from '../../config/config.js';\n\nconst base256 = (val: number, base: number) => {\n  return ('00' + Math.floor((val * 256) / base).toString(16)).substr(-2, 2);\n};\n\nconst substrToNum = (dateString: string, indexStart: number, indexEnd: number): number =>\n  parseInt(dateString.substring(indexStart, indexEnd), 10);\n\nconst versionColor = () => {\n  const dateString = CONFIG.version.replace(/-/g, '');\n  const r = base256(substrToNum(dateString, 2, 4), 31);\n  const g = base256(substrToNum(dateString, 0, 2), 12);\n  const b = base256(substrToNum(dateString, 4, 6), 24);\n  return `#${r}${g}${b}`;\n};\n\nconst User: React.FunctionComponent<{}> = () => (\n  <div>\n    <span className=\"list-item\">\n      <span style={{ color: versionColor() }}> {CONFIG.version}</span>{' '}\n      <small>\n        <b>{process.env.NODE_ENV}</b>\n      </small>\n    </span>\n    <span className=\"glyphicon glyphicon-cog action-button\" aria-hidden=\"true\" />\n    <span className=\"action-button\">{CONFIG.user.name}</span>\n    <audio id=\"clickSound\" src={CONFIG.clickSound} />\n    <hr />\n  </div>\n);\n\nexport default User;\n","export const createReducer = (initialState: any, handlers: any) => (state: any, actionC: any) => {\n  if (state === void 0) {\n    state = initialState;\n  }\n  if (Object.prototype.hasOwnProperty.call(handlers, actionC.type)) {\n    return handlers[actionC.type](state, actionC);\n  }\n  return state;\n};\n","import { createReducer } from '../../utils/frontend.utils';\nimport { ListCreds, TodoList } from '../types';\nimport * as Utils from '../../utils/utils';\nimport { appActions, listActions } from '../actions';\nimport { appModes } from '../../config/constants';\n\nexport type AppState = {\n  mode: string;\n  lists: TodoList[];\n  aList: TodoList;\n  task: string;\n  fromList: ListCreds;\n};\n\nexport const initialState: AppState = {\n  mode: appModes.MODE_LOADING,\n  lists: [],\n  aList: { id: '', userId: 0, name: '', tasks: '', done: '', immutable: false, lastAction: '' },\n  task: '',\n  fromList: { listId: '', name: '' },\n};\n\nconst appReducer = createReducer(initialState, {\n  [appActions.moveInitiationAction.type]: (state: AppState, action: any) => {\n    return {\n      ...state,\n      // statusMsg: 'Move task to ... ',\n      mode: appModes.MODE_MOVE,\n      fromList: action.payload.fromList,\n      task: action.payload.task,\n    };\n  },\n  [appActions.moveToListAction.type]: (state: AppState, action: any) => {\n    return {\n      ...state,\n      // statusMsg: 'Adding on top ...',\n      mode: appModes.MODE_LOADING,\n    };\n  },\n  [appActions.importListAction.type]: (state: AppState, action: any) => {\n    return {\n      ...state,\n      // statusMsg: 'Adding a list on top ...',\n      mode: appModes.MODE_LOADING,\n    };\n  },\n  [appActions.exportListAction.type]: (state: AppState, action: any) => {\n    return {\n      ...state,\n      // statusMsg: 'Exporting to a list ...',\n      mode: appModes.MODE_LOADING,\n    };\n  },\n  [appActions.errorAction.type]: (state: AppState) => {\n    return {\n      ...state,\n      mode: appModes.MODE_ERROR,\n    };\n  },\n  [appActions.dataConflictAction.type]: (state: AppState, action: any) => {\n    return {\n      ...state,\n      // statusMsg: new Date(action.payload).toLocaleTimeString('lt-LT'),\n      mode: appModes.DATA_CONFLICT,\n    };\n  },\n\n  // New, correct from here\n\n  [appActions.setMode.type]: (state: AppState, action: ReturnType<typeof appActions.setMode>) => {\n    return {\n      ...state,\n      mode: action.payload,\n    };\n  },\n  [listActions.getListOfLists.done.type]: (\n    state: AppState,\n    action: ReturnType<typeof listActions.getListOfLists.done>,\n  ) => {\n    return {\n      ...state,\n      lists: Utils.sortArrOfObjectsByParam(action.payload, 'updatedAt', true),\n    };\n  },\n  [listActions.getAList.done.type]: (state: AppState, action: ReturnType<typeof listActions.getListOfLists.done>) => {\n    return {\n      ...state,\n      aList: action.payload,\n    };\n  },\n});\n\nexport default appReducer;\n","import { createReducer } from '../../utils/frontend.utils';\nimport { statusActions } from '../actions';\nimport { setStatusMessage } from './status.actions';\n\nexport type StatusState = {\n  message: string;\n};\n\nexport const initialState: StatusState = {\n  message: 'Hello!',\n};\n\nconst statusReducer = createReducer(initialState, {\n  [setStatusMessage.type]: (state: StatusState, action: ReturnType<typeof statusActions.setStatusMessage>) => {\n    return {\n      ...state,\n      message: action.payload,\n    };\n  },\n});\n\nexport default statusReducer;\n","import { Action } from 'typescript-fsa';\nimport * as dotProp from 'dot-prop-immutable';\n\nimport { setSelectedList } from './selected.actions';\nimport { createReducer } from '../../utils/frontend.utils';\n\nexport type SelectedState = {\n  readonly listId: string | null;\n};\n\nexport const initialState: SelectedState = {\n  listId: null,\n};\n\nconst selectedReducer = createReducer(initialState, {\n  [setSelectedList.type]: (state: SelectedState, action: Action<number | null>) =>\n    dotProp.set(state, 'listId', action.payload),\n});\n\nexport default selectedReducer;\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport AppReducer, { AppState } from './app/app.reducer';\nimport StatusReducer, { StatusState } from './status/status.reducer';\nimport selectedReducer, { SelectedState } from './selected/selected.reducer';\n\nexport interface RootState {\n  app: AppState,\n  status: StatusState,\n  selected: SelectedState;\n  form: any;\n}\n\nexport default combineReducers({\n  app: AppReducer,\n  status: StatusReducer,\n  selected: selectedReducer,\n  form: formReducer,\n});\n","import { AxiosInstance } from 'axios';\nimport { OmitId, TodoList } from '../../../store/types';\n\nconst listsUrl = 'lists/';\nconst aListUrl = 'list/';\n\nconst ListsServiceFactory = ({ HTTPBase }: { HTTPBase: AxiosInstance }) => {\n  return {\n    callGetListOfList: (): Promise<TodoList[]> => HTTPBase.get(listsUrl).then((res) => res.data),\n    callGetAList: (listId: string): Promise<TodoList> => HTTPBase.get(`${aListUrl}${listId}`).then((res) => res.data),\n    callCreateAList: (aList: OmitId<TodoList>): Promise<TodoList> => HTTPBase.post(listsUrl, aList).then((res) => res.data),\n    callUpdateAList: (aList: TodoList): Promise<TodoList> =>\n      HTTPBase.put(`${aListUrl}${aList.id}`, aList).then((res) => res.data),\n    callDeleteAList: (listId: string): Promise<any> =>\n      HTTPBase.delete(`${aListUrl}${listId}`).then((res) => res.data),\n  };\n};\n\nexport default ListsServiceFactory;\n","import { ApiManager } from './apiManager';\nimport CONFIG from '../../config/config.js';\n\nconst host = process.env.NODE_ENV === 'development' ? CONFIG.devHost : CONFIG.apiHost;\nconst userId = CONFIG.user.id;\n\nexport default ApiManager({\n  HTTPBaseURL: `${host}${userId}/`,\n});\n","import { Error } from 'tslint/lib/error';\nimport CONFIG from '../config/config.js';\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\nexport type OmitId<T extends { id: string }> = Omit<T, 'id'>;\n\nexport interface TodoList {\n  id: string;\n  userId: number;\n  name: string;\n  tasks: string;\n  done: string;\n  immutable: boolean;\n  lastAction: string;\n}\n\nexport interface SerializedTodoList {\n  listId: string;\n  itemsDone: string[];\n  itemsTodo: string[];\n  lastAction: string;\n  previousAction: string;\n  taskToAdd?: string;\n  listData?: TodoList;\n}\n\nexport interface TodoListImpEx {\n  fromListId: string;\n  toListId: string;\n}\n\nexport interface TodoListMove {\n  fromListId: string;\n  toListId: string;\n  task: string;\n}\n\nexport interface TodoListMoveByName {\n  fromListId: string;\n  listName: string;\n  task: string;\n  move: boolean;\n  backToOldList?: boolean;\n}\n\nexport interface TodoListCopy {\n  toListId: string;\n  task: string;\n}\n\nexport interface ListCreds {\n  listId: string;\n  name: string;\n}\n\nexport interface HotKey {\n  key: string;\n  listId: string;\n  listName: string;\n}\n\nexport interface ListNameOnly {\n  listName: string;\n}\n\nexport const getNewTodoListEntity = (listName: string): OmitId<TodoList> => {\n  if (!listName) {\n    throw new Error('Trying create list without name!');\n  }\n  return {\n    userId: CONFIG.user.id,\n    lastAction: new Date().toISOString(),\n    name: listName,\n    tasks: '[]',\n    done: '[]',\n    immutable: false,\n  };\n};\n","import api from './index';\nimport { getNewTodoListEntity, TodoList } from '../../store/types';\n\nexport const apiGetListOfLists = (): Promise<TodoList[]> => api.lists.callGetListOfList();\nexport const apiGetAList = (listId: string): Promise<TodoList> => api.lists.callGetAList(listId);\nexport const apiCreateAList = (listName: string): Promise<TodoList> =>\n  api.lists.callCreateAList(getNewTodoListEntity(listName));\nexport const apiUpdateAList = (listId: string, data): Promise<TodoList> =>\n  api.lists.callUpdateAList({ id: listId, ...data } as TodoList);\nexport const apiDeleteAList = (listId: string): Promise<TodoList> => api.lists.callDeleteAList(listId);\n","import { all, put, select, takeEvery } from 'redux-saga/effects';\nimport { Action } from 'typescript-fsa';\nimport * as dotProp from 'dot-prop-immutable';\n\nimport * as utils from '../../utils/utils.js';\nimport {\n  ListNameOnly,\n  SerializedTodoList,\n  TodoList,\n  TodoListCopy,\n  TodoListImpEx,\n  TodoListMove,\n  TodoListMoveByName,\n} from '../types';\nimport { dayMonthName, dayNumber, dayString, dayWeekName } from '../../utils/calendar';\nimport { appSelector, statusSelector } from '../selectors';\nimport { appModes, statusMessages } from '../../config/constants';\nimport { appActions, listActions, selectedActions, statusActions } from '../actions';\nimport { findOrCreateListByNameHelperSaga, getAListSagaHelper, getListOfListsSagaHelper } from '../list/list.sagas';\nimport { getPreviousDays } from '../../utils/stringUtils';\nimport { apiCreateAList, apiDeleteAList, apiGetAList, apiGetListOfLists, apiUpdateAList } from '../../core/api/utils';\n\n/**\n * Check if TodoList can be safely saved, and update\n */\nfunction* checkAndSave({ payload }: Action<SerializedTodoList>) {\n  const { listId, listData, previousAction, taskToAdd } = payload;\n  yield put(statusActions.setStatusMessage(statusMessages.msgChecking));\n  const originalList = yield apiGetAList(listId);\n\n  // ToDo: not perfect\n  if (originalList.lastAction.slice(0, 19) !== previousAction.slice(0, 19)) {\n    if (taskToAdd) {\n      yield put(statusActions.setStatusMessage(statusMessages.msgAdding));\n      const data = {\n        toListId: listId,\n        task: taskToAdd,\n      };\n      // yield copyTaskToListSaga({ payload: data, type: '' });\n      yield put(appActions.copyToListAction(data));\n      // yield put(statusActions.setStatusMessage(statusMessages.msgAddedAndRefreshed));\n      return;\n    }\n    yield put(statusActions.setStatusMessage(statusMessages.msgDataConflict));\n    yield put(appActions.dataConflictAction(originalList.lastAction));\n    return;\n  }\n  yield put(statusActions.setStatusMessage(statusMessages.msgSaved));\n  yield apiUpdateAList(listId, listData);\n}\n\n/**\n * Create / open list by name\n */\nfunction* addOrOpenListsByNameSaga({ payload: { listName } }: Action<ListNameOnly>) {\n  try {\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingLists));\n    const listId = yield findOrCreateListByNameHelperSaga(listName);\n    yield put(appActions.openAList(listId));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Imports list into current list\n *\n * @param {TodoListImpEx} payload\n * @returns {IterableIterator<any>}\n */\nfunction* importListSaga({ payload }: Action<TodoListImpEx>) {\n  try {\n    const { fromListId, toListId } = payload;\n    const first = yield apiGetAList(fromListId);\n    const second = yield apiGetAList(toListId);\n    const data = {\n      lastAction: new Date().toISOString(),\n      tasks: utils.concatTwoJSONs(first.tasks, second.tasks),\n    };\n    yield apiUpdateAList(toListId, data);\n    yield put(appActions.openAList(toListId));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Exports list to another and deletes original\n *\n * @param {TodoListImpEx} payload\n * @returns {IterableIterator<any>}\n */\nfunction* exportListSaga({ payload }: Action<TodoListImpEx>) {\n  try {\n    const { fromListId, toListId } = payload;\n    const fromList = yield apiGetAList(fromListId);\n    const toList = yield apiGetAList(toListId);\n    const data = {\n      lastAction: new Date().toISOString(),\n      tasks: utils.concatTwoJSONs(fromList.tasks, toList.tasks),\n    };\n    yield apiUpdateAList(toListId, data);\n    yield apiDeleteAList(fromListId);\n    yield put(appActions.openAList(toListId));\n    yield put(statusActions.setStatusMessage(statusMessages.msgExported));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Moves task: copies to another and deletes from original, refreshes original\n *\n * @param {Action<TodoListMove>} action\n * @returns {IterableIterator<any>}\n */\nfunction* moveTaskToListSaga(action: Action<TodoListMove>) {\n  try {\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield removeTaskFromList(action);\n    yield prependToAList(action);\n    yield put(appActions.openAList(action.payload.fromListId));\n    yield put(statusActions.setStatusMessage(statusMessages.msgMoved));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Copies task to another list, opens target list\n *\n * @param {Action<TodoListCopy>} action\n * @returns {IterableIterator<any>}\n */\nfunction* copyTaskToListSaga(action: Action<TodoListCopy>) {\n  try {\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield prependToAList(action);\n    yield put(appActions.openAList(action.payload.toListId));\n    yield put(statusActions.setStatusMessage(statusMessages.msgCopied));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Moves task to list specified by name\n *\n * @param {Action<TodoListMoveByName>} action\n * @returns {IterableIterator<any>}\n */\nfunction* moveToListByNameSaga(action: Action<TodoListMoveByName>) {\n  try {\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    const listId = yield findOrCreateListByNameHelperSaga(action.payload.listName);\n    const newAction = dotProp.set(action, 'payload.toListId', listId);\n    yield prependToAList(newAction);\n    if (action.payload.move) {\n      yield removeTaskFromList(newAction);\n    }\n    yield put(appActions.openAList(action.payload.backToOldList ? action.payload.fromListId : listId));\n    yield put(appActions.setMode(appModes.MODE_A_LIST));\n    yield put(statusActions.setStatusMessage(statusMessages.msgMoved));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\nfunction* prependToAList({ payload }: Action<TodoListCopy>) {\n  try {\n    const { toListId, task } = payload;\n    const originalList = yield apiGetAList(toListId);\n    const data = {\n      lastAction: new Date().toISOString(),\n      tasks: utils.prependToJSON(task, originalList.tasks),\n    };\n    yield apiUpdateAList(toListId, data);\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\nfunction* removeTaskFromList({ payload }: Action<TodoListMove>) {\n  try {\n    const { fromListId, task } = payload;\n    const originalList = yield apiGetAList(fromListId);\n    const data = {\n      lastAction: new Date().toISOString(),\n      tasks: utils.removeTask(task, originalList.tasks),\n    };\n    yield apiUpdateAList(fromListId, data);\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n// New, correct from here\n/**\n * Load lists and go to main ListOfLists page\n */\nfunction* startupSaga() {\n  try {\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingLists));\n    yield getListOfListsSagaHelper();\n    yield put(appActions.setMode(appModes.MODE_LIST_OF_LISTS));\n    yield put(statusActions.setStatusMessage(statusMessages.msgListsLoaded));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Reload ListOfLists page\n */\nfunction* reloadListOfListsSaga() {\n  try {\n    const currentMode = yield select(appSelector.selectCurrentMode);\n    const currentMsg = yield select(statusSelector.getCurrentMessage);\n\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingLists));\n\n    yield getListOfListsSagaHelper();\n\n    yield put(appActions.setMode(currentMode));\n    yield put(statusActions.setStatusMessage(currentMsg));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Collects previous days todos into Today\n * Creates Today in not present\n */\nfunction* collectPastDaysSaga() {\n  try {\n    // Set messages\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingLists));\n\n    // Refresh list\n    const listOfLists = yield apiGetListOfLists();\n    // Save received list\n    yield put(listActions.getListOfLists.done(listOfLists));\n    // Find/create today's list\n    const todayListName = dayString(new Date());\n    let todayList = listOfLists.find((list: TodoList) => list.name === todayListName);\n    if (!todayList) {\n      yield put(statusActions.setStatusMessage(`statusMessages.msgCreatingAList${todayListName}`));\n      todayList = yield apiCreateAList(todayListName);\n      yield getListOfListsSagaHelper();\n    }\n\n    // Collect legacy ToDos\n    let prevDayList;\n    const legacyListIds: string[] = [];\n    let collectedTasks = todayList.tasks;\n    getPreviousDays().forEach((prevDayString) => {\n      // prevDayString = dayString(new Date(Date.now() - secsPerDay * before));\n      prevDayList = listOfLists.find((list: TodoList) => list.name === prevDayString);\n      if (prevDayList) {\n        legacyListIds.push(prevDayList.id as string);\n        collectedTasks = utils.concatTwoJSONs(collectedTasks, prevDayList.tasks);\n      }\n    });\n\n    // Update Today and delete legacy lists\n    if (legacyListIds.length) {\n      todayList = {\n        ...todayList,\n        lastAction: new Date().toISOString(),\n        tasks: collectedTasks,\n      } as TodoList;\n      yield apiUpdateAList(todayList.id, todayList);\n      yield put(statusActions.setStatusMessage(statusMessages.msgDeletingAList));\n      yield all(legacyListIds.map((listId) => apiDeleteAList(listId)));\n      yield getListOfListsSagaHelper();\n    }\n    yield put(listActions.getAList.done(todayList)); // ToDo: get rid of\n    yield put(selectedActions.setSelectedList(todayList.id));\n    yield put(statusActions.setStatusMessage(statusMessages.msgTodaysLoaded));\n    yield put(appActions.setMode(appModes.MODE_A_LIST));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n// ToDo: check why ListOfLists is not refreshed without mode change\nfunction* deleteAListSaga({ payload }: ReturnType<typeof appActions.deleteAList>) {\n  yield put(appActions.setMode(appModes.MODE_LOADING));\n  yield put(statusActions.setStatusMessage(statusMessages.msgDeletingAList));\n  yield apiDeleteAList(payload);\n  yield getListOfListsSagaHelper();\n  yield put(statusActions.setStatusMessage(statusMessages.msgListDeleted));\n  yield put(appActions.setMode(appModes.MODE_LIST_OF_LISTS));\n}\n\nconst isListRelevant = (listName: string, tryLists: string[]) => {\n  return tryLists.includes(listName);\n};\n\n/**\n * Creates lists for upcoming week\n */\nfunction* planWeekSaga() {\n  yield put(statusActions.setStatusMessage(statusMessages.msgPlanAWeek));\n  yield put(appActions.setMode(appModes.MODE_LOADING));\n  try {\n    // Refresh list\n    const listOfLists: TodoList[] = yield apiGetListOfLists();\n    const protectedLists = listOfLists.filter((l) => l.immutable);\n    const now = new Date();\n    let shiftDate = new Date();\n\n    for (let shift = 6; shift >= 0; shift--) {\n      shiftDate = new Date(now.getTime() + 1000 * 60 * 60 * 24 * shift);\n      const listName = dayString(shiftDate);\n      if (!listOfLists.find((list: TodoList) => list.name === listName)) {\n        const list = yield apiCreateAList(listName);\n        const tryLists = [\n          `Auto - ${dayNumber(shiftDate)}d.`,\n          `Auto - ${dayWeekName(shiftDate)}`,\n          `Auto - ${dayMonthName(shiftDate)} ${dayNumber(shiftDate)}d.`,\n        ];\n\n        const relList = protectedLists.filter((l) => isListRelevant(l.name, tryLists)).map((l) => l.name);\n        // console.log('-****- protectedLists', protectedLists.map((l) => l.name));\n        // console.log('-****- tryLists', tryLists);\n        // console.log('-****- relList', relList);\n\n        const append = protectedLists\n          .filter((l) => isListRelevant(l.name, tryLists))\n          .flatMap((l) => JSON.parse(l.tasks));\n\n        if (append.length) {\n          const todayList = {\n            lastAction: new Date().toISOString(),\n            tasks: JSON.stringify(append),\n          } as TodoList;\n          yield apiUpdateAList(list.id, todayList);\n        }\n      }\n    }\n    yield getListOfListsSagaHelper();\n    yield put(statusActions.setStatusMessage(statusMessages.msgWeekPlanned));\n    yield put(appActions.setMode(appModes.MODE_LIST_OF_LISTS));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Load and open page with a ToDoList\n */\n\nfunction* openAListByIdSaga({ payload }: ReturnType<typeof appActions.openAList>) {\n  try {\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingAList));\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    const listName = yield getAListSagaHelper(payload);\n    yield put(appActions.setMode(appModes.MODE_A_LIST));\n    yield put(statusActions.setStatusMessage(`${listName}${statusMessages.msgLoaded}`));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Reload a list\n */\nfunction* reloadAListSaga({ payload }: ReturnType<typeof appActions.reloadAList>) {\n  try {\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingAList));\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n\n    const listName = yield getAListSagaHelper(payload);\n    if (listName) {\n      yield put(appActions.setMode(appModes.MODE_A_LIST));\n      yield put(statusActions.setStatusMessage(`${listName}${statusMessages.msgLoaded}`));\n      return;\n    }\n    yield getListOfListsSagaHelper();\n    yield put(statusActions.setStatusMessage(statusMessages.msgListsLoaded));\n    yield put(appActions.setMode(appModes.MODE_LIST_OF_LISTS));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Fires Error action\n * @param e Error\n */\nexport function* generalFailure(e: Action<{}>) {\n  console.error(e);\n  yield put(appActions.errorAction(e));\n}\n\nexport default function* appSagas() {\n  yield all([\n    takeEvery(appActions.addOrOpenListByNameAction, addOrOpenListsByNameSaga),\n    takeEvery(appActions.checkAndSaveAction, checkAndSave),\n    takeEvery(appActions.moveToListAction, moveTaskToListSaga),\n    takeEvery(appActions.copyToListAction, copyTaskToListSaga),\n    takeEvery(appActions.moveToListByNameAction, moveToListByNameSaga),\n    takeEvery(appActions.importListAction, importListSaga),\n    takeEvery(appActions.exportListAction, exportListSaga),\n    takeEvery(appActions.planWeekAction, planWeekSaga),\n    // New from here\n    // takeEvery(appActions.openAList, openAListSaga),\n    takeEvery(appActions.startup, startupSaga),\n    takeEvery(appActions.openAList, openAListByIdSaga),\n    takeEvery(appActions.reloadListOfLists, reloadListOfListsSaga),\n    takeEvery(appActions.reloadAList, reloadAListSaga),\n    takeEvery(appActions.collectPastDays, collectPastDaysSaga),\n    takeEvery(appActions.deleteAList, deleteAListSaga),\n    // takeEvery(appActions.moveInitiationAction, moveInitiationActionSaga),\n  ]);\n}\n","import { all, call, put } from 'redux-saga/effects';\n\nimport { generalFailure } from '../app/app.sagas';\nimport api from '../../core/api';\nimport { getAList, getListOfLists } from './list.actions';\nimport { getNewTodoListEntity, TodoList } from '../types';\nimport { apiGetAList } from '../../core/api/utils';\n\nexport function* getListOfListsSagaHelper() {\n  const result = yield call(api.lists.callGetListOfList);\n  yield put(getListOfLists.done(result));\n}\n\nexport function* getAListSagaHelper(listId: string) {\n  const result = yield apiGetAList(listId);\n  yield put(getAList.done(result));\n  return result ? result.name : null;\n}\n\nexport default function* listSagas() {\n  yield all([]);\n}\n\n/**\n * Finds list by name or creates new\n */\nexport function* findOrCreateListByNameHelperSaga(listName: string) {\n  try {\n    const listOfLists = yield call(api.lists.callGetListOfList);\n    const found = listOfLists.find((list: TodoList) => list.name === listName);\n    if (found) {\n      return found.id;\n    }\n    const newList = yield call(api.lists.callCreateAList, getNewTodoListEntity(listName));\n    return newList.id;\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n","import { all } from 'redux-saga/effects';\n\nimport listSagas from './list/list.sagas';\nimport appSagas from './app/app.sagas';\n\nexport default function* RootSaga() {\n  yield all([\n    appSagas(),\n    listSagas()\n  ]);\n}\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\nimport combineReducers from './reducers';\nimport RootSaga from './sagas';\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport function configureStore(middlewares: []) {\n  const sagaMiddleware = createSagaMiddleware();\n  const middleware = [sagaMiddleware, thunk, ...middlewares];\n  // middleware.push(authMiddleware);\n  // middleware.push(createLogger());\n\n  return {\n    ...createStore(combineReducers, composeEnhancers(applyMiddleware(...middleware))),\n    runSaga: sagaMiddleware.run,\n  };\n}\n\nexport function buildStore(middlewares: []) {\n  const store = configureStore(middlewares);\n  store.runSaga(RootSaga);\n  return store;\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport CONFIG from './config/config.js';\nimport App from './routes/AppContainer';\nimport Status from './routes/Status/Status';\nimport User from './routes/User';\nimport { buildStore } from './store/store';\n\nwindow.onbeforeunload = function() {\n  return 'Do you really want to leave ToDo app?';\n  // if we return nothing here (just calling return;) then there will be no pop-up question at all\n  // return;\n};\n\nconst store = buildStore([]);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  CONFIG.appNode,\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Status />\n  </Provider>,\n  CONFIG.statusNode,\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <User />\n  </Provider>,\n  CONFIG.userNode,\n);\n"],"sourceRoot":""}