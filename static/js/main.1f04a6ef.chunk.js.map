{"version":3,"sources":["config/config.js","config/constants.ts","shared/Spinner/Spinner.tsx","store/forms.ts","routes/Failure/Failure.tsx","store/config.ts","store/app/app.actions.ts","routes/Failure/FailureContainer.tsx","store/list/list.actions.ts","store/status/status.actions.ts","store/selected/selected.actions.ts","utils/hotkeys.ts","routes/MovePage/ListsFilter/ListsFilter.tsx","locale/lt.js","utils/calendar.ts","routes/MovePage/MovePage.tsx","store/app/app.selector.ts","utils/stringUtils.tsx","store/list/list.selector.ts","utils/filterUtils.ts","store/status/status.selector.ts","routes/MovePage/MovePageContainer.tsx","utils/utils.js","components/ListsTable.tsx","core/axios/index.ts","core/api/apiManager.ts","components/ListsPage.tsx","routes/ListsApp/ListsAppContainer.tsx","components/TasksList.tsx","components/TasksDoneList.tsx","components/TasksPage.tsx","routes/TasksApp/TasksAppContainer.tsx","routes/App.tsx","routes/AppContainer.tsx","routes/Status/Status.tsx","routes/User/User.tsx","utils/frontend.utils.ts","store/app/app.reducer.ts","store/status/status.reducer.ts","store/selected/selected.reducer.ts","store/reducers.ts","core/api/lists/lists.api.ts","core/api/index.ts","store/types.ts","core/api/utils.ts","store/app/app.sagas.ts","store/list/list.sagas.ts","store/sagas.js","store/store.ts","index.tsx"],"names":["config","appModes","devHost","apiHost","separatorString","listsAddon","settingsAddon","user","id","name","settings","openListIfExists","addNewAt","displayListLength","displayDoneLength","displayLast","statusNode","document","getElementById","userNode","appNode","footerNode","clickSound","version","Spinner_Spinner","react","className","Forms","restrictions","maxTaskLength","collectDaysBefore","statusMessages","msgHello","msgPlanAWeek","msgChecking","msgAdding","msgSaved","msgMoved","msgCopied","msgExported","msgImported","msgAddedAndRefreshed","msgDataConflict","msgLoadingLists","msgLoadingAList","msgListsLoaded","msgTodaysLoaded","msgLoaded","msgCreatingAList","msgDeletingAList","msgListDeleted","msgWeekPlanned","Failure_Failure","props","msg","openAListRequest","aList","onClick","store_config","appName","actionCreator","Object","lib","addOrOpenListByNameAction","moveInitiationAction","moveToListByNameAction","moveToListAction","copyToListAction","importListAction","exportListAction","checkAndSaveAction","planWeekAction","dataConflictAction","errorAction","setMode","reloadListOfLists","reloadAList","openAList","collectPastDays","startup","deleteAList","FailureContainer","Recompose_esm","es","state","app","dispatch","redux","list_actions_actionCreator","newListAction","async","updateListAction","refreshListAction","getListOfLists","getAList","setStatusMessage","status_actions_actionCreator","setSelectedList","lib_default","selected_actions_actionCreator","registerHotKeys","checkKeyPressed","jquery_default","on","e","disableHotKeys","off","playSound","play","ListsFilter","reduxForm","form","listsFilter","initialValues","searchInput","_a","pageHotKeys","Field","placeholder","component","onFocus","bind","undefined","onBlur","DAYS","MONTHS","dayString","date","getDay","getMonth","getDate","dayWeekName","toLowerCase","dayMonthName","dayNumber","MovePage_MovePage","moveHandler","moveToList","fromList","task","toListId","fromListId","listId","copyHandler","copyToAList","moveToNewListHandler","moveToListByName","newListName","listName","move","moveToTomorrowHandler","Date","setDate","backToOldList","copyToNewListHandler","backHandler","reloadHandler","reloadListOfListsPage","pressed","String","fromCharCode","which","preventDefault","componentDidMount","this","componentWillUnmount","tomorrowListName","lists","substring","aria-hidden","disabled","map","list","key","selectSelectedTask","selectCurrentMode","mode","selectPreviousList","hotKeyedListName","hotKeys","str","letter","n","corresponding","filter","item","length","indexOf","react_default","a","createElement","getPreviousDays","Array","from","i","now","selectListOfLists","selectAListById","find","selectAList","selectMutableLists","immutable","selectImmutableLists","selectExportables","slice","getFilteredListOfLists","reselect_es","getFormValues","listOfLists","filterForm","criteria","toLocaleLowerCase","findLegacyExists","some","includes","getCurrentMessage","status","message","MovePageContainer","searchFormValues","list_selector_namespaceObject","app_selector_namespaceObject","app_actions_namespaceObject","sortArrOfObjectsByParam","arrToSort","sortBy","sortDesc","sort","b","moveToAnother","fromA","toB","toTop","trans","splice","A","B","_","unique","concat","moveToEnd","items","moveToTop","moveFromTo","fromPos","toPos","removeItem","concatTwoJSONs","json1","json2","JSON","stringify","parse","prependToJSON","strng","jsn","removeTask","overLength","CONFIG","grabDate","someDateStr","toLocalTime","substr","grabTime","utcDateStr","toString","replace","toISOString","conf","instance","HTTPBaseURL","components_ListsTable","_super","ListsTable","_this","apply","arguments","contractedListItemHeader","sign","isContracted","colSpan","toggleContracted","contractedTitle","contractedListItems","displayIndentedListRow","contractedList","prepareListForDisplaying","indent","displayListRow","itemClass","action","deletable","removeList","noOfTasks","updatedDateOrTime","tasks","openList","updatedAt","displayList","isList","tslib_es6","prototype","render","propTypes","prop_types_default","array","func","isRequired","makeContractableList","dashPos","used","push","components_ListsPage","ListsPage","call","listNameInput","focus","reload","goToday","planWeek","collectPastDaysRequest","forEach","k","addHotKeys","newKey","findFreeKey","keyIsNotOccupied","elem","len","pretender","startupRequest","onNameChange","setState","target","value","handleSubmit","addOrOpenAList","getAListRequest","listTitle","beContracted","newList","handleKeyDownAtListInput","keyCode","blur","immutableLists","title","width","legacyExists","onSubmit","ref","input","onKeyDown","onChange","trim","ListsAppContainer","TasksList","TaskList","hightlightOnDemand","element","index","highlightIndex","processTaskText","taskTruncated","taskAsDisplayed","href","rel","openListByName","displayTask","omitted","config_config","itemIndex","done","delete","procrastinate","postpone","taskListDisplayed","shouldOmit","expand","number","components_TasksDoneList","TasksDoneList","undone","bool","components_TasksPage","TasksPage","calculatePostponePosition","pos","Math","floor","doneTask","moved","itemsToDo","itemsDone","dataToSave","prepareClone","lastAction","checkAndSave","serialize","unDoneTask","atPos","clearDone","mark","moveOutside","data","procrastinateTask","postponeTask","min","changeListName","listNameOnEdit","listChanger","goLists","goPrevious","previousList","editListName","taskInput","handleHeaderSubmit","handleKeyDownAtTask","handleKeyDownAtHeader","taskToAdd","underscore_default","importList","exportList","makeListOption","displayImportBlock","immutables","displayExportBlock","exportables","manageHeader","headerInput","defaultValue","prepend","reloadNeeded","expandToDo","expandDone","newProps","previousAction","entity","res","listData","inputDirty","markTitle","markGlyphicon","expandToDoGlyphicon","expandDoneGlyphicon","TasksAppContainer","routes_App","MODE_LOADING","MODE_LIST_OF_LISTS","MODE_A_LIST","MODE_MOVE","DATA_CONFLICT","MODE_ERROR","AppContainer","Status_Status","base256","val","base","substrToNum","dateString","indexStart","indexEnd","parseInt","User_User","style","color","src","createReducer","initialState","handlers","actionC","hasOwnProperty","type","app_reducer","userId","app_reducer_a","payload","list_actions_namespaceObject","status_reducer","status_reducer_a","selected_reducer","selected_reducer_a","dot_prop_immutable_lib","reducers","selected","reducer","lists_api","HTTPBase","callGetListOfList","get","then","callGetAList","callCreateAList","post","callUpdateAList","put","callDeleteAList","defaultConf","headers","content-type","host","api","baseURL","axios_default","create","interceptors","response","use","r","err","console","error","Promise","reject","getNewTodoListEntity","apiGetListOfLists","apiGetAList","apiCreateAList","apiUpdateAList","apiDeleteAList","effects","status_actions_namespaceObject","_b","sent","originalList","addOrOpenListsByNameSaga","findOrCreateListByNameHelperSaga","generalFailure","importListSaga","first","second","exportListSaga","toList","moveTaskToListSaga","removeTaskFromList","prependToAList","copyTaskToListSaga","moveToListByNameSaga","newAction","startupSaga","getListOfListsSagaHelper","reloadListOfListsSaga","currentMode","status_selector_namespaceObject","currentMsg","collectPastDaysSaga","listOfLists_1","todayListName_1","todayList","legacyListIds_1","collectedTasks_1","prevDayString","prevDayList_1","selected_actions_namespaceObject","deleteAListSaga","isListRelevant","tryLists","planWeekSaga","protectedLists","l","shiftDate","shift","getTime","tryLists_1","append","flatMap","openAListByIdSaga","getAListSagaHelper","reloadAListSaga","appSagas","result","listSagas","found","RootSaga","all","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","onbeforeunload","store","src_store","middlewares","sagaMiddleware","redux_saga_es","middleware","redux_thunk_es","runSaga","run","configureStore","react_dom"],"mappings":"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","file":"static/js/main.1f04a6ef.chunk.js","sourcesContent":["export const config = {\n  devHost: 'https://akvaratodo-flask-api.herokuapp.com/',\n  // devHost: 'http://localhost:5000/',\n  // apiHost: 'https://akvaratododb.herokuapp.com/',\n  apiHost: 'https://akvaratodo-flask-api.herokuapp.com/',\n  separatorString: '..................',\n  listsAddon: 'lists',\n  settingsAddon: 'settings',\n  user: {\n    id: 1,\n    name: 'akvara',\n    settings: {\n      openListIfExists: 'Current',\n      addNewAt: 4,\n      displayListLength: 15,\n      displayDoneLength: 3,\n      displayLast: 2,\n    },\n  },\n  statusNode: document.getElementById('status'),\n  userNode: document.getElementById('user'),\n  appNode: document.getElementById('app'),\n  footerNode: document.getElementById('footer'),\n  clickSound: 'https://www.soundjay.com/buttons/button-20.mp3',\n  version: '0326-15',\n};\n\nexport default config;\n","export enum appModes {\n  MODE_LOADING = 'LOADING',\n  MODE_ERROR = 'ERROR',\n  MODE_LIST_OF_LISTS = 'LIST_OF_LISTS',\n  MODE_A_LIST = 'A_LIST',\n  MODE_MOVE = 'MOVE',\n  DATA_CONFLICT = 'DATA_CONFLICT',\n}\n\nexport const restrictions = {\n  maxTaskLength: 180,\n  collectDaysBefore: 7,\n};\n\nexport const statusMessages = {\n  msgHello: 'Hello!',\n  msgPlanAWeek: 'Planing a week ...',\n  msgChecking: 'Checking ...',\n  msgAdding: 'Adding ...',\n  msgSaved: 'Saved.',\n  msgMoved: 'Item moved.',\n  msgCopied: 'Item copied.',\n  msgExported: 'List exported.',\n  msgImported: 'List imported.',\n  msgAddedAndRefreshed: 'Item added and list refreshed.',\n  msgDataConflict: 'Data conflict.',\n  msgLoadingLists: 'Loading lists ...',\n  msgLoadingAList: 'Loading a list ...',\n  msgListsLoaded: 'Lists loaded.',\n  msgTodaysLoaded: 'Today\\'s list loaded.',\n  msgLoaded: ' loaded.',\n  msgCreatingAList: 'Creating a list: ',\n  msgDeletingAList: 'Deleting a list ...',\n  msgListDeleted: 'List removed.',\n  msgWeekPlanned: 'A week ahead added.',\n};\n\nexport const secsPerDay = 864e5;\n","import * as React from 'react';\n\nimport './spinner.css';\n\nconst Spinner: React.FunctionComponent<{}> = () => <div className=\"spinner\">Loading...</div>;\n\nexport default Spinner;\n","export enum Forms {\n  listsFilter = 'listsFilter',\n}\n","import * as React from 'react';\nimport { defaultProps } from 'recompose';\n\nimport { TodoList } from '../../store/types';\nimport { appActions } from '../../store/actions';\n\nexport interface FailureProps {\n  msg: string;\n}\n\ninterface FailurePrivateProps extends FailureProps {\n  openAListRequest: typeof appActions.openAList;\n  aList: TodoList;\n}\n\nconst Failure: React.FunctionComponent<FailurePrivateProps> = (props) => {\n  const { msg, openAListRequest, aList } = props;\n  return (\n    <div>\n      <br />\n      {msg}\n      <br />\n      Please <button onClick={() => openAListRequest(aList.id)}>reload</button>\n    </div>\n  );\n};\n\nexport default Failure;\n","const reduxConfig = {\n  appName: 'app',\n};\n\nexport default reduxConfig;\n","import { actionCreatorFactory } from 'typescript-fsa';\n\nimport reduxConfig from '../config';\nimport { ListNameOnly, TodoListCopy, TodoListImpEx, TodoListMove, TodoListMoveByName } from '../types';\n\nconst actionCreator = actionCreatorFactory(reduxConfig.appName + '/app');\n\nexport const addOrOpenListByNameAction = actionCreator<ListNameOnly>('ADD_OR_OPEN_LIST');\nexport const moveInitiationAction = actionCreator<{}>('MOVE_INITIATED');\nexport const moveToListByNameAction = actionCreator<TodoListMoveByName>('MOVE_BY_NAME');\nexport const moveToListAction = actionCreator<TodoListMove>('MOVE_TO');\nexport const copyToListAction = actionCreator<TodoListCopy>('COPY_TO');\nexport const importListAction = actionCreator<TodoListImpEx>('IMPORT_LIST');\nexport const exportListAction = actionCreator<TodoListImpEx>('EXPORT_LIST');\nexport const checkAndSaveAction = actionCreator<{}>('CHECK_AND_SAVE');\nexport const planWeekAction = actionCreator<{}>('PLAN_WEEK');\nexport const dataConflictAction = actionCreator<{}>('DATA_CONFLICT');\nexport const errorAction = actionCreator<{}>('ERROR');\n// New, correct\nexport const setMode = actionCreator<string>('SET_MODE');\nexport const reloadListOfLists = actionCreator<void>('RELOAD_LISTS');\nexport const reloadAList = actionCreator<string>('RELOAD_A_LIST');\nexport const openAList = actionCreator<string>('OPEN_A_LIST');\nexport const collectPastDays = actionCreator<void>('COLLECT_PAST');\nexport const startup = actionCreator<void>('STARTUP');\nexport const deleteAList = actionCreator<string>('DELETE_A_LIST');\n","import * as React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect, Dispatch } from 'react-redux';\nimport { compose, defaultProps } from 'recompose';\n\nimport { RootState } from '../../store/reducers';\nimport Failure, { FailureProps } from './Failure';\nimport * as appActions from '../../store/app/app.actions';\n\nconst mapStateToProps = (state: RootState) => ({\n  aList: state.app.aList,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootState>) => {\n  return bindActionCreators(\n    {\n      openAListRequest: appActions.openAList,\n    },\n    dispatch,\n  );\n};\n\nexport default compose<FailureProps>(\n  defaultProps({\n    msg: 'Ooops, something went wrong...',\n  }),\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n)(Failure);\n","import { actionCreatorFactory } from 'typescript-fsa';\n\nimport reduxConfig from '../config';\nimport { TodoList } from '../types';\n\nconst actionCreator = actionCreatorFactory(reduxConfig.appName + '/list');\n\nexport const newListAction = actionCreator.async<{}, any>('NEW_LIST');\nexport const updateListAction = actionCreator.async<{}, any>('UPDATE_LIST');\nexport const refreshListAction = actionCreator.async<any, {}>('REFRESH_LIST');\n// New, correct\nexport const getListOfLists = actionCreator.async<void, TodoList[]>('GET_LIST_OF_LISTS');\nexport const getAList = actionCreator.async<string, TodoList>('GET_A_LIST');\n","import { actionCreatorFactory } from 'typescript-fsa';\n\nimport reduxConfig from '../config';\n\nconst actionCreator = actionCreatorFactory(reduxConfig.appName + '/status');\n\nexport const setStatusMessage = actionCreator<string>('SET_STATUS_MESSAGE');\n","import actionCreatorFactory from 'typescript-fsa';\nimport reduxConfig from '../config';\n\nconst actionCreator = actionCreatorFactory(reduxConfig.appName + '/selected');\n\nexport const setSelectedList = actionCreator<number | null>('SET_SELECTED_LIST');\n","import $ from 'jquery';\n\nexport const registerHotKeys = (checkKeyPressed) => {\n  $(document).on('keypress', (e) => checkKeyPressed(e));\n};\n\nexport const disableHotKeys = () => {\n  $(document).off('keypress');\n};\n\nexport const playSound = () => {\n  let sound = document.getElementById('clickSound') as HTMLAudioElement;\n  sound.play();\n};\n","import * as React from 'react';\nimport { compose, withProps } from 'recompose';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { Forms } from '../../../store/forms';\nimport { disableHotKeys, registerHotKeys } from '../../../utils/hotkeys';\n\nexport interface ListsFilterProps {\n  pageHotKeys: () => void;\n}\n\ninterface ListsFilterPrivateProps extends ListsFilterProps {}\n\nconst ListsFilterInput: React.FunctionComponent<ListsFilterPrivateProps> = ({ pageHotKeys }) => {\n  return (\n    <Field\n      className=\"list-input\"\n      name=\"searchInput\"\n      placeholder={''}\n      component=\"input\"\n      onFocus={disableHotKeys.bind(this)}\n      onBlur={registerHotKeys.bind(this, pageHotKeys)}\n    />\n  );\n};\n\nexport default compose<ListsFilterPrivateProps, ListsFilterProps>(\n  // withForwardedRef,\n  reduxForm({\n    form: Forms.listsFilter,\n    initialValues: {\n      searchInput: '',\n    },\n  }),\n)(ListsFilterInput);\n","export const DAYS = [\n  'Sekmadienį',\n  'Pirmadienį',\n  'Antradienį',\n  'Trečiadienį',\n  'Ketvirtadienį',\n  'Penktadienį',\n  'Šeštadienį',\n];\n\nexport const MONTHS = [\n  'sausio',\n  'vasario',\n  'kovo',\n  'balandžio',\n  'gegužės',\n  'birželio',\n  'liepos',\n  'rugpjūčio',\n  'rugsėjo',\n  'spalio',\n  'lapkričio',\n  'gruodžio',\n];\n","import { DAYS, MONTHS } from '../locale/lt';\n\nexport const dayString = (date: Date) => `${DAYS[date.getDay()]}, ${MONTHS[date.getMonth()]} ${date.getDate()} d.`;\nexport const dayWeekName = (date: Date) => DAYS[date.getDay()].toLowerCase();\nexport const dayMonthName = (date: Date) => MONTHS[date.getMonth()];\nexport const dayNumber = (date: Date) => date.getDate();\n","import * as React from 'react';\nimport { compose, lifecycle, withHandlers, withProps } from 'recompose';\n\nimport { disableHotKeys, playSound, registerHotKeys } from '../../utils/hotkeys';\nimport { ListCreds, TodoList } from '../../store/types';\nimport { appActions } from '../../store/actions';\nimport { config } from '../../config/config';\nimport ListsFilter from './ListsFilter';\nimport { restrictions } from '../../config/constants';\nimport { dayString } from '../../utils/calendar';\n\nexport interface MovePageProps {\n  task: string;\n  lists: TodoList[];\n  fromList: ListCreds;\n  openAList: typeof appActions.openAList;\n  moveToList: typeof appActions.moveToListAction;\n  moveToListByName: typeof appActions.moveToListByNameAction;\n  copyToAList: typeof appActions.copyToListAction;\n  reloadListOfListsPage: typeof appActions.reloadListOfLists;\n  newListName: string;\n  tomorrowListName: string;\n}\n\ninterface MovePageHandlers {\n  moveHandler: (toListId: string) => void;\n  copyHandler: (toListId: string) => void;\n  moveToNewListHandler: () => void;\n  moveToTomorrowHandler: () => void;\n  copyToNewListHandler: () => void;\n  backHandler: () => void;\n  reloadHandler: () => void;\n  pageHotKeys: (e: any) => void;\n}\n\ninterface MovePagePrivateProps extends MovePageProps, MovePageHandlers {\n  pageHotKeys: (e: any) => void;\n}\n\nconst MovePage: React.FunctionComponent<MovePagePrivateProps> = (props) => {\n  const {\n    task,\n    newListName,\n    tomorrowListName,\n    lists,\n    fromList,\n    moveToNewListHandler,\n    moveToTomorrowHandler,\n    copyToNewListHandler,\n    moveHandler,\n    copyHandler,\n    backHandler,\n    reloadHandler,\n    pageHotKeys,\n  } = props;\n\n  return (\n    <>\n      <hr />\n      <h2>{task.substring(0, restrictions.maxTaskLength)}</h2>\n      <hr />\n      <button onClick={backHandler}>\n        {'<'} Back to {fromList.name}\n      </button>{' '}\n      <button onClick={reloadHandler}>\n        <span className={'glyphicon glyphicon-refresh'} aria-hidden=\"true\" /> <u>R</u>eload\n      </button>{' '}\n      <button onClick={moveToTomorrowHandler}>\n        {tomorrowListName}\n      </button>\n      <hr />\n      <ListsFilter pageHotKeys={pageHotKeys} />\n      <button disabled={!newListName} onClick={moveToNewListHandler}>\n        Move to new list\n      </button>{' '}\n      <button disabled={!newListName} onClick={copyToNewListHandler}>\n        Copy to new list\n      </button>\n      <hr />\n      <table className=\"table table-hover\">\n        <tbody>\n          {lists.map((list) =>\n            list.id === fromList.listId ? null : (\n              <tr key={'tr' + list.id}>\n                <td>\n                  To: <strong>{list.name}</strong>\n                </td>\n                <td>\n                  <button onClick={() => moveHandler(list.id)}>Move</button>{' '}\n                  <button onClick={() => copyHandler(list.id)}>Copy</button>\n                </td>\n              </tr>\n            ),\n          )}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default compose<MovePagePrivateProps, MovePageProps>(\n  withHandlers<MovePagePrivateProps, MovePageHandlers>({\n    moveHandler: ({ moveToList, fromList, task }) => (toListId) => {\n      moveToList({ fromListId: fromList.listId, toListId, task });\n    },\n    copyHandler: ({ copyToAList, task }) => (toListId) => {\n      copyToAList({ toListId, task });\n    },\n    moveToNewListHandler: ({ moveToListByName, fromList, task, newListName }) => () => {\n      moveToListByName({\n        fromListId: fromList.listId,\n        task,\n        listName: newListName,\n        move: true,\n      });\n    },\n    moveToTomorrowHandler: ({ moveToListByName, fromList, task }) => () => {\n      moveToListByName({\n        fromListId: fromList.listId,\n        task,\n        listName: dayString(new Date(new Date().setDate(new Date().getDate() + 1))),\n        move: true,\n        backToOldList: true,\n      });\n    },\n    copyToNewListHandler: ({ moveToListByName, fromList, task, newListName }) => () => {\n      moveToListByName({\n        fromListId: fromList.listId,\n        task,\n        listName: newListName,\n        move: false,\n      });\n    },\n    backHandler: ({ openAList, fromList }) => () => {\n      openAList(fromList.listId);\n    },\n    reloadHandler: ({ reloadListOfListsPage }) => () => {\n      reloadListOfListsPage();\n    },\n  }),\n  withProps(({ reloadHandler, backHandler }) => ({\n    pageHotKeys: (e) => {\n      const pressed = String.fromCharCode(e.which);\n\n      if (pressed === 'r') {\n        e.preventDefault();\n        playSound();\n        reloadHandler();\n        return;\n      }\n      if (pressed === '<') {\n        e.preventDefault();\n        playSound();\n        backHandler();\n        return;\n      }\n    },\n  })),\n  lifecycle<MovePagePrivateProps, {}>({\n    componentDidMount() {\n      registerHotKeys(this.props.pageHotKeys);\n    },\n    componentWillUnmount() {\n      disableHotKeys();\n    },\n  }),\n)(MovePage);\n","import { getFormValues } from 'redux-form';\n\nimport { RootState } from '../reducers';\nimport { ListCreds } from '../types';\n\nexport const selectSelectedTask = (state: RootState): string => state.app.task;\nexport const selectCurrentMode = (state: RootState): string => state.app.mode;\n// ToDo: Move to Selected\nexport const selectPreviousList = (state: RootState): ListCreds | null =>\n  state.app.fromList && state.app.aList.id === state.app.fromList.listId ? null : state.app.fromList;\n","import React from 'react';\nimport { HotKey } from '../store/types';\nimport { restrictions, secsPerDay } from '../config/constants';\nimport { dayString } from './calendar';\n\n/**\n *  Returns string with underlined first of given letter\n *\n */\nexport const strongify = (str: string, letter: string) => {\n  const n = str.toLowerCase().indexOf(letter);\n\n  if (n === -1) {\n    return str;\n  }\n\n  return (\n    <span>\n      {str.substring(0, n)}\n      <u>{str.substring(n, n + 1)}</u>\n      {str.substring(n + 1, str.length)}\n    </span>\n  );\n};\n\nexport const hotKeyedListName = (listName: string, hotKeys: HotKey[]) => {\n  if (!hotKeys) {\n    return listName;\n  }\n\n  const corresponding = hotKeys.filter((item) => item.listName === listName);\n\n  if (!corresponding.length) {\n    return listName;\n  }\n\n  return strongify(listName, corresponding[0].key);\n};\n\nexport const getPreviousDays = () =>\n  Array.from({ length: restrictions.collectDaysBefore }, (e, i) =>\n    dayString(new Date(Date.now() - secsPerDay * (i + 1))),\n  );\n","import { createSelector } from 'reselect';\nimport { getFormValues } from 'redux-form';\n\nimport { RootState } from '../reducers';\nimport { TodoList } from '../types';\nimport { Forms } from '../forms';\nimport { filterByString } from '../../utils/filterUtils';\nimport { getPreviousDays } from '../../utils/stringUtils';\n\nexport const selectListOfLists = (state: RootState): TodoList[] => state.app.lists;\n\nexport const selectAListById = (listId: string) => (state: RootState): TodoList | null =>\n  state.app.lists.find((list) => list.id === listId) || null;\n\nexport const selectAList = (state: RootState): TodoList => state.app.aList;\n\nexport const selectMutableLists = (state: RootState): TodoList[] =>\n  state.app.lists.filter((item: TodoList) => !item.immutable);\n\nexport const selectImmutableLists = (state: RootState): TodoList[] =>\n  state.app.lists.filter((item: TodoList) => item.immutable);\n\nexport const selectExportables = (state: RootState): TodoList[] =>\n  state.app.lists.filter((item) => item.id !== state.app.aList.id && !item.immutable).slice(0, 20);\n\nexport const getFilteredListOfLists = createSelector(\n  [selectMutableLists, getFormValues(Forms.listsFilter)],\n  (listOfLists, filterForm: any): TodoList[] =>\n    filterForm ? listOfLists.filter((list) => filterByString(list.name, filterForm.searchInput)) : listOfLists,\n);\n\nexport const findLegacyExists = (state: RootState): boolean =>\n  state.app.lists.some((aList) =>  getPreviousDays().includes(aList.name));\n","export const filterByString = (str: string = '', criteria: string) =>\n  str.toLocaleLowerCase().indexOf(criteria.toLocaleLowerCase()) > -1;\n","import { getFormValues } from 'redux-form';\n\nimport { RootState } from '../reducers';\n\nexport const getCurrentMessage = (state: RootState): string => state.status.message;\n","import { bindActionCreators, compose } from 'redux';\nimport { connect, Dispatch } from 'react-redux';\nimport { getFormValues } from 'redux-form';\n\nimport { appActions } from '../../store/actions';\nimport { RootState } from '../../store/reducers';\nimport MovePage from './MovePage';\nimport { appSelector, listSelector } from '../../store/selectors';\nimport { Forms } from '../../store/forms';\nimport { dayString } from '../../utils/calendar';\n\nconst mapStateToProps = (state: RootState) => {\n  const searchFormValues = getFormValues(Forms.listsFilter)(state);\n  return {\n    lists: listSelector.getFilteredListOfLists(state),\n    task: appSelector.selectSelectedTask(state),\n    fromList: state.app.fromList,\n    newListName: searchFormValues ? searchFormValues.searchInput : '',\n    tomorrowListName: dayString(new Date(new Date().setDate(new Date().getDate() + 1))),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootState>) => {\n  return bindActionCreators(\n    {\n      openAList: appActions.openAList,\n      moveToListByName: appActions.moveToListByNameAction,\n      moveToList: appActions.moveToListAction,\n      copyToAList: appActions.copyToListAction,\n      reloadListOfListsPage: appActions.reloadListOfLists,\n    },\n    dispatch,\n  );\n};\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n)(MovePage);\n","import _ from 'underscore';\nimport CONFIG from '../config/config.js';\n\nexport const sortArrOfObjectsByParam = (arrToSort, sortBy, sortDesc) => {\n  if (!sortDesc) {\n    return arrToSort.sort(function(a, b) {\n      return a[sortBy] < b[sortBy] ? -1 : 1;\n    });\n  } else {\n    return arrToSort.sort(function(a, b) {\n      return a[sortBy] > b[sortBy] ? -1 : 1;\n    });\n  }\n};\n\nexport const moveToAnother = (fromA, toB, i, toTop) => {\n  let trans = fromA[i];\n  fromA.splice(i, 1);\n  if (toTop) {\n    toB = _.unique([trans].concat(toB));\n  } else {\n    toB = _.unique(toB.concat([trans]));\n  }\n\n  return { A: fromA, B: toB };\n};\n\nexport const moveToEnd = (items, i) => {\n  let trans = items[i];\n  items.splice(i, 1);\n\n  return items.concat([trans]);\n};\n\nexport const moveToTop = (items, i) => {\n  let trans = items[i];\n  items.splice(i, 1);\n\n  return [trans].concat(items);\n};\n\nexport const moveFromTo = (items, fromPos, toPos) => {\n  let trans = items[fromPos];\n  items.splice(fromPos, 1);\n  items.splice(toPos, 0, trans);\n\n  return items;\n};\n\nexport const removeItem = (items, i) => {\n  items.splice(i, 1);\n\n  return items;\n};\n\nexport const concatTwoJSONs = (json1, json2) => {\n  return JSON.stringify(_.unique(JSON.parse(json1).concat(JSON.parse(json2))));\n};\n\nexport const prependToJSON = (strng, jsn) => {\n  return JSON.stringify(_.unique([strng].concat(JSON.parse(jsn))));\n};\n\nexport const removeTask = (strng, jsn) => {\n  return JSON.stringify(JSON.parse(jsn).filter((item) => item !== strng));\n};\n\nexport const overLength = (which, items) => {\n  return items.length > CONFIG.user.settings[which];\n};\n\nexport const grabDate = (someDateStr) => {\n  return toLocalTime(someDateStr).substr(0, 10);\n};\n\nexport const grabTime = (someDateStr) => {\n  return toLocalTime(someDateStr).substr(11, 5);\n};\n\nexport const toLocalTime = (utcDateStr) => {\n  return new Date(new Date(utcDateStr).toString().replace(/GMT.*/g, '') + ' UTC').toISOString();\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as Utils from '../utils/utils.js';\nimport { hotKeyedListName } from '../utils/stringUtils';\n\nclass ListsTable extends Component {\n  static propTypes = {\n    hotKeys: PropTypes.array,\n    lists: PropTypes.array,\n    openList: PropTypes.func.isRequired,\n    removeList: PropTypes.func,\n  };\n\n  contractedListItemHeader = (list, i) => {\n    let sign = 'glyphicon-minus';\n    if (list.isContracted) {\n      sign = 'glyphicon-plus';\n    }\n    return (\n      <tr key={'tr' + i}>\n        <td colSpan={2} onClick={this.props.toggleContracted.bind(this, list.contractedTitle, !list.isContracted)}>\n          <span className={'glyphicon list-item list-item-glyph glyphicon ' + sign} aria-hidden=\"true\" />\n          {list.contractedTitle}\n        </td>\n        <td className=\"right-align\">\n          <strong>{list.list.length}</strong>\n        </td>\n      </tr>\n    );\n  };\n\n  contractedListItems = (list) => {\n    if (list.isContracted) {\n      return null;\n    }\n    return list.list.map(this.displayIndentedListRow);\n  };\n\n  contractedList = (list, i) => {\n    return [this.contractedListItemHeader(list, i), this.contractedListItems(list, i)];\n  };\n\n  displayIndentedListRow = (list, i) => {\n    let item = this.prepareListForDisplaying(list);\n    item.indent = true;\n    return this.displayListRow(item, i);\n  };\n\n  displayListRow = (list, i) => (\n    <tr key={'tr' + i}>\n      <td className={list.itemClass} onClick={list.action}>\n        {list.indent && (\n          <span className={'glyphicon list-item list-item-glyph'} aria-hidden=\"true\">\n            {' '}\n          </span>\n        )}\n        <span className={'glyphicon list-item list-item-glyph glyphicon-folder-open'} aria-hidden=\"true\" />\n        {list.name}\n      </td>\n      <td className=\"actions\">\n        {list.deletable && (\n          <span\n            className=\"glyphicon glyphicon-trash action-button\"\n            aria-hidden=\"true\"\n            onClick={this.props.removeList.bind(this, list.id)}\n          />\n        )}\n      </td>\n      <td className=\"right-align\">\n        (<strong>{list.noOfTasks}</strong>) {list.updatedDateOrTime}\n      </td>\n    </tr>\n  );\n\n  prepareListForDisplaying = (list) => {\n    let item = {\n      id: list.id,\n      tasks: list.tasks,\n      noOfTasks: list.tasks ? JSON.parse(list.tasks).length : 0,\n      name: hotKeyedListName(list.name, this.props.hotKeys),\n      itemClass: 'list-item',\n      action: this.props.openList.bind(this, list.id, list.name),\n      deletable: list.tasks ? list.tasks === '[]' && !list.immutable : true,\n      updatedDateOrTime:\n        Utils.grabDate(new Date().toISOString()) === Utils.grabDate(list.updatedAt)\n          ? Utils.grabTime(list.updatedAt)\n          : Utils.grabDate(list.updatedAt),\n    };\n\n    if (list.immutable) {\n      item.itemClass += ' list-item-immutable';\n    }\n\n    return item;\n  };\n\n  displayList = (list, i) => {\n    if (list.isList) return this.contractedList(list, i);\n    let item = this.prepareListForDisplaying(list);\n\n    return this.displayListRow(item, i);\n  };\n\n  render() {\n    return (\n      <table className=\"table table-hover\">\n        <tbody>{this.props.lists.map(this.displayList)}</tbody>\n      </table>\n    );\n  }\n}\n\nexport default ListsTable;\n","import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\n\nconst commonHeaders = {\n  'content-type': 'application/json',\n};\n\nconst defaultConf = {\n  headers: commonHeaders,\n};\n\nexport const generateConf = (conf: AxiosRequestConfig): AxiosInstance => {\n  const instance = axios.create({ ...defaultConf, ...conf });\n  instance.interceptors.response.use(\n    function(r) {\n      return r;\n    },\n    function(err) {\n      const response = err.response;\n      console.error('API ERROR:', response);\n      return Promise.reject(response);\n    },\n  );\n  return instance;\n};\n","import ListsServiceFactory from './lists/lists.api';\nimport { generateConf } from '../axios';\n\n// export interface APIManagerConfig {\n//   userId?: string;\n// }\n\n// const config: APIManagerConfig = {};\n\ntype apiManagerParams = {\n  HTTPBaseURL: string;\n};\n\nexport const ApiManager = (params: apiManagerParams) => {\n  const { HTTPBaseURL } = params;\n  const HTTP = generateConf({ baseURL: HTTPBaseURL });\n  return {\n    lists: ListsServiceFactory({ HTTPBase: HTTP }),\n  };\n};\n","import * as React from 'react';\nimport { compose } from 'recompose';\n\nimport ListsTable from './ListsTable';\n\nimport { disableHotKeys, playSound, registerHotKeys } from '../utils/hotkeys';\nimport { TodoList } from '../store/types';\nimport { dayString } from '../utils/calendar';\nimport { appActions } from '../store/actions';\n\nexport interface ListsPageProps {\n  lists: TodoList[];\n  legacyExists: boolean;\n  getAListRequest: typeof appActions.openAList;\n  startupRequest: typeof appActions.startup;\n  addOrOpenAList: typeof appActions.addOrOpenListByNameAction;\n  removeList: typeof appActions.deleteAList;\n  planWeek: typeof appActions.planWeekAction;\n}\n\nexport interface ListsPagePrivateProps extends ListsPageProps {}\n\nconst makeContractableList = (listOfLists) => {\n  const contractedList = [];\n\n  listOfLists.map((list) => {\n    const dashPos = list.name.indexOf(' - ');\n    if (dashPos > -1) {\n      const contractedTitle = list.name.substring(0, dashPos);\n      if (!contractedList[contractedTitle]) {\n        contractedList[contractedTitle] = { used: false, list: [] };\n      }\n      contractedList[contractedTitle].list.push(list);\n    }\n    return null;\n  });\n\n  const displayList = [];\n\n  listOfLists.map((list) => {\n    const dashPos = list.name.indexOf(' - ');\n    if (dashPos > -1) {\n      const contractedTitle = list.name.substring(0, dashPos);\n      if (contractedList[contractedTitle].list.length > 1) {\n        if (!contractedList[contractedTitle].used) {\n          contractedList[contractedTitle].used = true;\n          displayList.push({\n            isList: true,\n            isContracted: true,\n            contractedTitle: contractedTitle,\n            list: contractedList[contractedTitle].list,\n          });\n        }\n      } else {\n        displayList.push(list);\n      }\n    } else {\n      displayList.push(list);\n    }\n    return null;\n  });\n  return displayList;\n};\n\nclass ListsPage extends React.PureComponent {\n  constructor(props: ListsPagePrivateProps) {\n    super(props);\n    this.state = {\n      lists: makeContractableList(props.lists.filter((list) => !list.immutable)),\n      immutableLists: props.lists.filter((list) => list.immutable),\n      listName: '',\n    };\n\n    this.hotKeys = [\n      // reserved hotkeys\n      { key: 'a' }, // \"Add\"\n      { key: 'r' }, // \"Refresh\"\n      { key: 'l' }, // \"List refresh\"\n      { key: 't' }, // \"Today\"\n      { key: 'p' }, // \"Plan\"\n      { key: '>' }, // \">>\"\n    ];\n  }\n\n  componentWillUnmount() {\n    disableHotKeys();\n  }\n\n  componentDidMount() {\n    document.title = 'ToDo lists';\n    registerHotKeys(this.checkKeyPressed.bind(this));\n  }\n\n  checkKeyPressed = (e) => {\n    const pressed = String.fromCharCode(e.which);\n    if (pressed === 'a') {\n      playSound();\n      e.preventDefault();\n      this.listNameInput.focus();\n      return;\n    }\n    if (pressed === 'r' || pressed === 'l') {\n      playSound();\n      e.preventDefault();\n      this.reload();\n      return;\n    }\n    if (pressed === 't') {\n      playSound();\n      this.goToday();\n      return;\n    }\n    if (pressed === 'p') {\n      playSound();\n      this.props.planWeek();\n      return;\n    }\n    if (pressed === '>') {\n      playSound();\n      this.props.collectPastDaysRequest();\n      return;\n    }\n    this.hotKeys.forEach(\n      function(k) {\n        if (k.key === pressed) {\n          playSound();\n          this.openAList(k.listId);\n        }\n      }.bind(this),\n    );\n  };\n\n  addHotKeys = () => {\n    this.state.lists.forEach((list) => {\n      if (!list.isList) {\n        let newKey = this.findFreeKey(list.name);\n        if (newKey) this.hotKeys.push({ key: newKey, listId: list.id, listName: list.name });\n      }\n    });\n  };\n\n  keyIsNotOccupied = (key) => !this.hotKeys.filter((elem) => elem.key === key).length;\n\n  findFreeKey = (str) => {\n    for (let i = 0, len = str.length; i < len; i++) {\n      let pretender = str[i].toLowerCase();\n      if ('abcdefghijklmnopqrstuvwxyz'.indexOf(pretender) !== -1 && this.keyIsNotOccupied(pretender)) return pretender;\n    }\n    return null;\n  };\n\n  /* Go to list of lists */\n  reload = () => {\n    this.props.startupRequest();\n  };\n\n  onNameChange = (e) => {\n    this.setState({ listName: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.addOrOpenAList({ listName: this.state.listName });\n  };\n\n  openAList = (listId) => {\n    this.props.getAListRequest(listId);\n  };\n\n  toggleContracted = (listTitle, beContracted) => {\n    const newList = this.state.lists.map((list) => {\n      if (list.isList && list.contractedTitle === listTitle) {\n        return {\n          ...list,\n          isContracted: beContracted,\n        };\n      } else {\n        return list;\n      }\n    });\n    this.setState({ lists: newList });\n  };\n\n  removeList = (listId) => {\n    this.props.removeList(listId);\n  };\n\n  handleKeyDownAtListInput = (e) => {\n    if (e.keyCode === 27) {\n      this.listNameInput.blur();\n      this.setState({\n        listName: '',\n      });\n    }\n  };\n\n  goToday = () => this.props.addOrOpenAList({ listName: dayString(new Date()) });\n\n  render() {\n    this.addHotKeys();\n    return (\n      <div>\n        <table width=\"100%\">\n          <tbody>\n            <tr>\n              <td>\n                <h1>Lists</h1>\n              </td>\n              <td className=\"right-align\">\n                {this.props.legacyExists && (\n                  <span>\n                    <button onClick={this.props.collectPastDaysRequest}> >> T</button>{' '}\n                  </span>\n                )}\n                <button onClick={this.goToday}>\n                  <u>T</u>oday\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <ListsTable\n          lists={this.state.lists}\n          openList={this.openAList}\n          toggleContracted={this.toggleContracted}\n          removeList={this.removeList}\n          hotKeys={this.hotKeys}\n        />\n        <h3>Protected</h3>\n        <ListsTable lists={this.state.immutableLists} openList={this.openAList} />\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"list-input\"\n            ref={(input) => {\n              this.listNameInput = input;\n            }}\n            value={this.state.listName}\n            onFocus={disableHotKeys.bind(this)}\n            onBlur={registerHotKeys.bind(this, this.checkKeyPressed)}\n            onKeyDown={this.handleKeyDownAtListInput}\n            onChange={this.onNameChange}\n          />\n          <button disabled={!this.state.listName.trim()}>Create new list</button>\n        </form>\n        <hr />\n        <button onClick={this.props.planWeek}>\n          <u>P</u>lan week\n        </button>\n        <button onClick={this.reload}>\n          <span className={'glyphicon glyphicon-refresh'} aria-hidden=\"true\" /> <u>R</u>eload\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ListsPage;\n","import { bindActionCreators } from 'redux';\nimport { connect, Dispatch } from 'react-redux';\nimport { compose } from 'recompose';\n\nimport { RootState } from '../../store/reducers';\nimport ListsPage, { ListsPageProps } from '../../components/ListsPage';\nimport { appActions } from '../../store/actions';\nimport { listSelector } from '../../store/selectors';\n\nconst mapStateToProps = (state: RootState) => ({\n  lists: listSelector.selectListOfLists(state),\n  legacyExists: listSelector.findLegacyExists(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootState>) => {\n  return bindActionCreators(\n    {\n      getAListRequest: appActions.openAList,\n      startupRequest: appActions.startup,\n      removeList: appActions.deleteAList,\n      addOrOpenAList: appActions.addOrOpenListByNameAction,\n      planWeek: appActions.planWeekAction,\n      collectPastDaysRequest: appActions.collectPastDays,\n    },\n    dispatch,\n  );\n};\n\nexport default compose<ListsPageProps, ListsPageProps>(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n)(ListsPage);\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CONFIG from '../config/config.js';\nimport * as Utils from '../utils/utils.js';\nimport { restrictions } from '../config/constants';\n\nclass TaskList extends React.Component {\n  static propTypes = {\n    items: PropTypes.array.isRequired,\n    done: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired,\n    toTop: PropTypes.func.isRequired,\n    move: PropTypes.func.isRequired,\n    procrastinate: PropTypes.func.isRequired,\n    postpone: PropTypes.func.isRequired,\n    openListByName: PropTypes.func.isRequired,\n    highlightIndex: PropTypes.number,\n  };\n\n  hightlightOnDemand(element, index) {\n    if (this.props.highlightIndex === index) {\n      return <strong>{element}</strong>;\n    }\n    return <span>{element}</span>;\n  }\n\n  processTaskText(task) {\n    if (task === null) task = 'null';\n    let taskTruncated = task.substring(0, restrictions.maxTaskLength),\n      taskAsDisplayed = taskTruncated;\n\n    /* If task is a link: */\n    if (task.substring(0, 4) === 'http') {\n      taskTruncated = taskTruncated.substr(taskTruncated.indexOf('://') + 3);\n      if (taskTruncated[taskTruncated.length - 1] === '/') {\n        taskTruncated = taskTruncated.substr(0, taskTruncated.length - 1);\n      }\n      taskAsDisplayed = (\n        <a href={task} target=\"_blank\" rel=\"noopener noreferrer\">\n          {taskTruncated}\n        </a>\n      );\n      return taskAsDisplayed;\n    }\n\n    /* if task is a folder: */\n    if (task.substring(0, 1) === '[') {\n      taskAsDisplayed = (\n        <span>\n          <span\n            className={'glyphicon glyphicon-folder-open list-first-item'}\n            aria-hidden=\"true\"\n            onClick={this.props.openListByName.bind(this, task.substring(1))}\n          />\n          {taskTruncated.substring(1)}\n        </span>\n      );\n    }\n\n    return taskAsDisplayed;\n  }\n\n  displayTask(task, i, omitted) {\n    if (task === CONFIG.separatorString) {\n      return (\n        <tr key={'tr' + i}>\n          <td>\n            <div className=\"task-row separator-row\">\n              <div>{CONFIG.separatorString}</div>\n              <div className=\"right-align\">{CONFIG.separatorString}</div>\n            </div>\n          </td>\n        </tr>\n      );\n    }\n\n    let itemIndex = i;\n    if (itemIndex >= CONFIG.user.settings.displayListLength - CONFIG.user.settings.displayLast) {\n      itemIndex = i + omitted;\n    }\n\n    let taskAsDisplayed = this.processTaskText(task);\n\n    if (this.props.immutable) {\n      return (\n        <tr key={'tr' + i}>\n          <td>{taskAsDisplayed}</td>\n        </tr>\n      );\n    } else {\n      return (\n        <tr key={'tr' + i}>\n          <td>\n            <div className=\"task-row\">\n                <span\n                  className=\"glyphicon glyphicon-unchecked action-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.done.bind(this, itemIndex)}\n                />\n              <div className=\"task-description\">\n                <span className=\"list-item task\">{this.hightlightOnDemand(taskAsDisplayed, itemIndex)}</span>\n              </div>\n              <div>\n                <span\n                  className=\"glyphicon glyphicon-trash delete-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.delete.bind(this, itemIndex)}\n                />\n                <span className=\"list-item\"> </span>\n                <span\n                  className=\"glyphicon glyphicon-arrow-down action-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.procrastinate.bind(this, itemIndex)}\n                />\n                <span\n                  className=\"glyphicon glyphicon-arrow-up action-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.toTop.bind(this, itemIndex)}\n                />\n                <span\n                  className=\"glyphicon glyphicon-random action-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.move.bind(this, task)}\n                />\n                <span\n                  className=\"glyphicon glyphicon-thumbs-down action-button\"\n                  aria-hidden=\"true\"\n                  onClick={this.props.postpone.bind(this, itemIndex)}\n                />\n              </div>\n            </div>\n          </td>\n        </tr>\n      );\n    }\n  }\n\n  render() {\n    let taskListDisplayed = this.props.items;\n    let shouldOmit = 0;\n\n    if (!this.props.expand && Utils.overLength('displayListLength', this.props.items)) {\n      shouldOmit = this.props.items.length - CONFIG.user.settings.displayListLength;\n      taskListDisplayed = this.props.items\n        .slice(0, CONFIG.user.settings.displayListLength - CONFIG.user.settings.displayLast - 1)\n        .concat([CONFIG.separatorString])\n        .concat(this.props.items.slice(-CONFIG.user.settings.displayLast));\n    }\n\n    return (\n      <table className=\"table table-condensed table-hover\">\n        <tbody>{taskListDisplayed.map((task, index) => this.displayTask(task, index, shouldOmit))}</tbody>\n      </table>\n    );\n  }\n}\n\nexport default TaskList;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CONFIG from '../config/config.js';\nimport * as Utils from '../utils/utils.js';\nimport { restrictions } from '../config/constants';\n\nclass TasksDoneList extends React.Component {\n  static propTypes = {\n    items: PropTypes.array.isRequired,\n    expand: PropTypes.bool,\n  };\n\n  /* Display one done task */\n  displayTask = (task, i) => {\n    if (!this.props.expand && i < this.props.items.length - CONFIG.user.settings.displayDoneLength) {\n      return null;\n    }\n\n    return (\n      <tr key={'tr' + i}>\n        <td>\n          <span\n            className=\"glyphicon glyphicon-ok action-button\"\n            aria-hidden=\"true\"\n            onClick={this.props.undone.bind(this, i)}\n          />\n          <span className=\"list-item task done\">{task.substring(0, restrictions.maxTaskLength)}</span>\n        </td>\n      </tr>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        {!this.props.expand && Utils.overLength('displayDoneLength', this.props.items) && CONFIG.separatorString}\n        <table className=\"table table-sm table-condensed table-hover\">\n          <tbody>{this.props.items.map(this.displayTask)}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default TasksDoneList;\n","import * as React from 'react';\nimport _ from 'underscore';\n\nimport TasksList from './TasksList';\nimport TasksDoneList from './TasksDoneList';\nimport CONFIG from '../config/config.js';\nimport { disableHotKeys, playSound, registerHotKeys } from '../utils/hotkeys';\nimport * as Utils from '../utils/utils.js';\nimport { ListCreds, SerializedTodoList, TodoList } from '../store/types';\nimport { appActions } from '../store/actions';\nimport { dayString } from '../utils/calendar';\n\nexport interface TaskPageProps {\n  lists: TodoList[];\n  aList: TodoList;\n  task: string;\n  fromList: string;\n  immutables: TodoList[];\n  exportables: TodoList[];\n  previousList: ListCreds;\n  reloadAList: typeof appActions.reloadAList;\n  startupRequest: typeof appActions.startup;\n  checkAndSave: typeof appActions.checkAndSaveAction;\n  importList: typeof appActions.importListAction;\n  exportList: typeof appActions.exportListAction;\n  addOrOpenAList: typeof appActions.addOrOpenListByNameAction;\n  moveOutside: typeof appActions.moveInitiationAction;\n}\n\ninterface TasksPageState {\n  listName: string;\n  itemsToDo: string[];\n  itemsDone: string[];\n  prepend: boolean;\n  highlightIndex: number | null;\n  lastAction: string;\n  immutable: boolean;\n  task: string;\n  reloadNeeded: boolean;\n  expandToDo: boolean;\n  listNameOnEdit: boolean;\n  expandDone: boolean;\n}\n\nclass TasksPage extends React.PureComponent<TaskPageProps, TasksPageState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      listName: props.aList.name,\n      itemsToDo: JSON.parse(props.aList.tasks),\n      itemsDone: props.aList.done ? JSON.parse(props.aList.done) : [],\n      prepend: props.prepend,\n      highlightIndex: props.prepend ? 0 : null,\n      lastAction: props.aList.lastAction,\n      immutable: props.aList.immutable,\n      task: '',\n      reloadNeeded: false,\n      listNameOnEdit: false,\n      expandToDo: false,\n      expandDone: false,\n    };\n  }\n\n  componentWillUnmount() {\n    disableHotKeys();\n  }\n\n  componentDidMount() {\n    document.title = 'ToDo lists';\n    registerHotKeys(this.checkKeyPressed.bind(this));\n  }\n\n  /* cloning State */\n  prepareClone(newProps: any) {\n    return {\n      lastAction: new Date().toISOString(),\n      listId: this.props.aList.id,\n      previousAction: this.state.lastAction,\n      ...newProps,\n    };\n  }\n\n  serialize(entity: SerializedTodoList) {\n    const res: SerializedTodoList = {\n      listId: entity.listId,\n      previousAction: entity.previousAction,\n      listData: {\n        lastAction: entity.lastAction,\n        immutable: !!entity.immutable,\n      },\n    };\n    if (entity.name) {\n      res.listData.name = entity.name;\n    }\n    if (entity.itemsToDo) {\n      res.listData.tasks = JSON.stringify(entity.itemsToDo);\n    }\n    if (entity.itemsDone) {\n      res.listData.done = JSON.stringify(entity.itemsDone);\n    }\n    if (entity.taskToAdd) {\n      res.taskToAdd = entity.taskToAdd;\n    }\n    return res;\n  }\n\n  /* Calculations */\n  readonly calculatePostponePosition = (pos: number) => Math.floor(pos / 2);\n\n  /* Show full/contracted ist */\n  readonly expand = (which: 'expandToDo' | 'expandDone') => {\n    this.setState({\n      [which]: !this.state[which],\n    } as any);\n  };\n\n  /* Move task to Done tasks array */\n  doneTask = (fromPos: number) => {\n    const moved = Utils.moveToAnother(this.state.itemsToDo, this.state.itemsDone, fromPos, false);\n    const itemsToDo = moved.A;\n    const itemsDone = moved.B;\n    const dataToSave = this.prepareClone({ itemsToDo, itemsDone });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      itemsDone: dataToSave.itemsDone,\n      highlightIndex: null,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Move task back from Done tasks array */\n  unDoneTask = (atPos: number) => {\n    const moved = Utils.moveToAnother(this.state.itemsDone, this.state.itemsToDo, atPos, true);\n    const dataToSave = this.prepareClone({ itemsToDo: moved.B, itemsDone: moved.A });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      itemsDone: dataToSave.itemsDone,\n      highlightIndex: 0,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Delete done tasks */\n  clearDone = () => {\n    const dataToSave = this.prepareClone({ itemsDone: [] });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsDone: dataToSave.itemsDone,\n      highlightIndex: null,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Remove task from list */\n  removeTask = (atPos: number) => {\n    const itemsToDo = Utils.removeItem(this.state.itemsToDo, atPos);\n    const dataToSave = this.prepareClone({ itemsToDo });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      highlightIndex: null,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Move task to top position */\n  toTop = (fromPos: number) => {\n    const itemsToDo = Utils.moveToTop(this.state.itemsToDo, fromPos);\n    const dataToSave = this.prepareClone({ itemsToDo });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      highlightIndex: 0,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Toggle immutable. No checking if changed */\n  mark = () => {\n    const dataToSave = this.prepareClone({ immutable: !this.state.immutable });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      immutable: dataToSave.immutable,\n      highlightIndex: null,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Move task to another list */\n  moveOutside = (task: string) => {\n    const data = {\n      fromList: { listId: this.props.aList.id, name: this.state.listName },\n      task,\n    };\n    this.props.moveOutside(data);\n  };\n\n  /* Move task to the end of the list */\n  readonly procrastinateTask = (fromPos: number) => {\n    const itemsToDo = Utils.moveToEnd(this.state.itemsToDo, fromPos);\n\n    const dataToSave = this.prepareClone({ itemsToDo });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      highlightIndex: this.state.itemsToDo.length,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Move task to the middle of the list */\n  readonly postponeTask = (fromPos: number) => {\n    const itemsToDo = Utils.moveFromTo(\n      this.state.itemsToDo,\n      fromPos,\n      fromPos + this.calculatePostponePosition(this.state.itemsToDo.length),\n    );\n    const dataToSave = this.prepareClone({ itemsToDo });\n\n    const highlightIndex = Math.min(\n      this.state.itemsToDo.length - 1,\n      fromPos + this.calculatePostponePosition(this.state.itemsToDo.length),\n    );\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      highlightIndex,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* Change list name */\n  readonly changeListName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const dataToSave = this.prepareClone({ name: e.target.value.trim() });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      listName: dataToSave.name,\n      listNameOnEdit: false,\n      highlightIndex: null,\n    });\n\n    this.props.checkAndSave(this.serialize(dataToSave));\n    registerHotKeys(this.checkKeyPressed.bind(this));\n  };\n\n  /* Go to another list */\n  listChanger = (listName: string) => {\n    this.props.addOrOpenAList({ listName });\n  };\n\n  /* Reload this list */\n  reload = () => {\n    this.props.reloadAList(this.props.aList.id);\n  };\n\n  /* Go to today's list */\n  goToday = () => {\n    this.props.addOrOpenAList({ listName: dayString(new Date()) });\n  };\n\n  /* Go to lists */\n  goLists = () => {\n    this.props.startupRequest();\n  };\n\n  /* Go to previous lists */\n  goPrevious = () => {\n    this.listChanger(this.props.previousList.name);\n  };\n\n  /* Mode: List name is on edit */\n  editListName = () => {\n    this.setState({\n      listNameOnEdit: true,\n    });\n  };\n\n  checkKeyPressed = (e) => {\n    switch (String.fromCharCode(e.which)) {\n      case 'a':\n        playSound();\n        e.preventDefault();\n        // @ts-ignore\n        this.taskInput.focus();\n        break;\n      case 'l':\n        playSound();\n        this.goLists();\n        break;\n      case 'r':\n        playSound();\n        this.reload();\n        break;\n      case 'p':\n        playSound();\n        this.mark();\n        break;\n      case 't':\n        playSound();\n        this.goToday();\n        break;\n      case '<':\n        if (this.props.previousList.listId) {\n          playSound();\n          this.goPrevious();\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  /* Edit header submit */\n  handleHeaderSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n  };\n\n  handleKeyDownAtTask = (e: React.KeyboardEvent) => {\n    if (e.keyCode === 27) {\n      // @ts-ignore\n      this.taskInput.blur();\n      this.setState({\n        task: '',\n      });\n    }\n  };\n\n  /* Edit header keypress */\n  handleKeyDownAtHeader = (e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'Enter':\n      case 'Tab':\n        this.changeListName(e);\n        break;\n      case 'Escape':\n        this.setState({ listNameOnEdit: false });\n        break;\n      default:\n        break;\n    }\n  };\n\n  /* New task submit */\n  handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // @ts-ignore\n    this.taskInput.blur();\n\n    const highlightIndex = Math.min(this.state.itemsToDo.length, CONFIG.user.settings.addNewAt - 1);\n    const taskToAdd = this.state.task.replace(/(^\\s+|\\s+$)/g, '');\n    let itemsToDo = this.state.itemsToDo;\n    itemsToDo.splice(CONFIG.user.settings.addNewAt - 1, 0, taskToAdd);\n    itemsToDo = _.unique(itemsToDo);\n    const dataToSave = this.prepareClone({ itemsToDo, taskToAdd });\n\n    this.setState({\n      lastAction: dataToSave.lastAction,\n      itemsToDo: dataToSave.itemsToDo,\n      highlightIndex,\n      task: '',\n    });\n    this.props.checkAndSave(this.serialize(dataToSave));\n  };\n\n  /* User input */\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ task: e.target.value });\n  };\n\n  importList = (listId: string) => {\n    this.props.importList({\n      fromListId: listId,\n      toListId: this.props.aList.id,\n    });\n  };\n\n  exportList = (listId: string) => {\n    this.props.exportList({\n      fromListId: this.props.aList.id,\n      toListId: listId,\n    });\n  };\n\n  makeListOption = (list: TodoList) => (\n    <option key={'o-' + list.id} value={list.id}>\n      {list.name}\n    </option>\n  );\n\n  /* Select for loading tasks from another list */\n  displayImportBlock = () => {\n    if (this.state.immutable) {\n      return null;\n    }\n\n    return (\n      <select\n        className=\"import-select\"\n        onChange={(e) => {\n          if (e.target.value) {\n            this.importList(e.target.value);\n          }\n        }}\n      >\n        <option value=\"\">Import list</option>\n        {this.props.immutables.map((list) => this.makeListOption(list))}\n      </select>\n    );\n  };\n\n  /* Select for exporting tasks to another list */\n  displayExportBlock = () => {\n    if (this.state.immutable) {\n      return null;\n    }\n\n    return (\n      <select\n        className=\"import-select\"\n        onChange={(e) => {\n          if (e.target.value) {\n            this.exportList(e.target.value);\n          }\n        }}\n      >\n        <option value=\"\">Export to</option>\n        {this.props.exportables.map((list) => this.makeListOption(list))}\n      </select>\n    );\n  };\n\n  /* Header - edit mode or not */\n  manageHeader = () => {\n    if (!this.state.listNameOnEdit) {\n      return (\n        <div>\n          <h1>{this.state.listName}</h1>{' '}\n          <span\n            className={'small action-button glyphicon glyphicon glyphicon-pencil'}\n            aria-hidden=\"true\"\n            onClick={this.editListName}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <h1>\n        <form onSubmit={this.handleHeaderSubmit}>\n          <input\n            ref={(input) => {\n              // @ts-ignore\n              this.headerInput = input;\n            }}\n            className=\"task-input\"\n            defaultValue={this.state.listName}\n            onFocus={disableHotKeys}\n            onKeyDown={this.handleKeyDownAtHeader}\n            onBlur={this.changeListName}\n          />\n        </form>\n      </h1>\n    );\n  };\n\n  render() {\n    const inputDirty = !!this.state.task.trim();\n    const markTitle = this.state.immutable ? (\n        <span>\n          Un<u>p</u>rotect\n        </span>\n      ) : (\n        <span>\n          <u>P</u>rotect\n        </span>\n      ),\n      markGlyphicon = this.state.immutable ? 'screen-shot' : 'exclamation-sign',\n      expandToDoGlyphicon = this.state.expandToDo ? 'glyphicon-resize-small' : 'glyphicon-resize-full',\n      expandDoneGlyphicon = this.state.expandDone ? 'glyphicon-resize-small' : 'glyphicon-resize-full';\n    return (\n      <div>\n        {this.manageHeader()}\n        <h3>\n          Finished ({this.state.itemsDone.length})\n          {Utils.overLength('displayDoneLength', this.state.itemsDone) && (\n            <span\n              className={'small action-button glyphicon ' + expandDoneGlyphicon}\n              aria-hidden=\"true\"\n              onClick={this.expand.bind(this, 'expandDone')}\n            />\n          )}\n          {'  '}\n          {this.state.itemsDone.length > 0 && (\n            <span\n              className=\"small action-button glyphicon glyphicon-trash\"\n              aria-hidden=\"true\"\n              onClick={this.clearDone}\n            />\n          )}\n        </h3>\n        <TasksDoneList items={this.state.itemsDone} undone={this.unDoneTask} expand={this.state.expandDone} />\n        <hr />\n        <h3>\n          Remaining ({this.state.itemsToDo.length})\n          {Utils.overLength('displayListLength', this.state.itemsToDo) && (\n            <span\n              className={'small list-item action-button glyphicon ' + expandToDoGlyphicon}\n              aria-hidden=\"true\"\n              onClick={this.expand.bind(this, 'expandToDo')}\n            />\n          )}\n        </h3>\n        <TasksList\n          items={this.state.itemsToDo}\n          highlightIndex={this.state.highlightIndex}\n          immutable={this.state.immutable}\n          delete={this.removeTask}\n          move={this.moveOutside}\n          toTop={this.toTop}\n          postpone={this.postponeTask}\n          procrastinate={this.procrastinateTask}\n          openListByName={this.listChanger}\n          reloadNeeded={this.state.reloadNeeded}\n          done={this.doneTask}\n          expand={this.state.expandToDo}\n        />\n        {!this.state.immutable && (\n          <div>\n            <hr />\n            <h3>Add new:</h3>\n            <form onSubmit={this.handleSubmit}>\n              <input\n                className=\"task-input\"\n                ref={(input) => {\n                  // @ts-ignore\n                  this.taskInput = input;\n                }}\n                value={this.state.task}\n                onFocus={disableHotKeys}\n                onBlur={() => registerHotKeys(this.checkKeyPressed)}\n                onKeyDown={this.handleKeyDownAtTask}\n                onChange={this.onChange}\n              />\n              <button disabled={!this.state.task.trim()}>Add task</button>\n            </form>\n          </div>\n        )}\n        <hr />\n        {this.displayImportBlock()}\n        {this.displayExportBlock()}\n        <br />\n        <button disabled={inputDirty} onClick={this.reload}>\n          <span className={'glyphicon glyphicon-refresh'} aria-hidden=\"true\" /> <u>R</u>eload\n        </button>\n        <button disabled={inputDirty} onClick={this.mark}>\n          <span className={'glyphicon glyphicon-' + markGlyphicon} aria-hidden=\"true\" /> {markTitle}\n        </button>\n        <button disabled={inputDirty} onClick={this.goLists}>\n          <span className=\"glyphicon glyphicon-tasks\" aria-hidden=\"true\" /> <u>L</u>ists\n        </button>\n        <button disabled={inputDirty} onClick={this.goToday}>\n          <span className=\"glyphicon glyphicon-subscript\" aria-hidden=\"true\" /> <u>T</u>oday\n        </button>\n        {this.props.previousList && this.props.previousList.listId && (\n          <button disabled={inputDirty} onClick={this.goPrevious}>\n            <span className=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\" /> {this.props.previousList.name}\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TasksPage;\n","import { bindActionCreators } from 'redux';\nimport { connect, Dispatch } from 'react-redux';\nimport { compose } from 'recompose';\n\nimport { RootState } from '../../store/reducers';\nimport { appActions } from '../../store/actions';\nimport TasksPage from '../../components/TasksPage';\nimport { appSelector, listSelector } from '../../store/selectors';\n\nconst mapStateToProps = (state: RootState) => ({\n  lists: listSelector.selectListOfLists(state),\n  aList: listSelector.selectAList(state),\n  task: state.app.task,\n  fromList: state.app.fromList,\n  immutables: listSelector.selectImmutableLists(state),\n  exportables: listSelector.selectExportables(state),\n  previousList: appSelector.selectPreviousList(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootState>) => {\n  return bindActionCreators(\n    {\n      reloadAList: appActions.reloadAList,\n      startupRequest: appActions.startup,\n      checkAndSave: appActions.checkAndSaveAction,\n      importList: appActions.importListAction,\n      exportList: appActions.exportListAction,\n      addOrOpenAList: appActions.addOrOpenListByNameAction,\n      moveOutside: appActions.moveInitiationAction,\n    },\n    dispatch,\n  );\n};\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n)(TasksPage);\n","import * as React from 'react';\nimport { compose, lifecycle } from 'recompose';\n\nimport Spinner from '../shared/Spinner';\nimport { appModes } from '../config/constants';\nimport { appActions } from '../store/actions';\nimport Failure from './Failure';\nimport MovePage from './MovePage';\nimport ListsApp from './ListsApp';\nimport TasksApp from './TasksApp';\nimport { TodoList } from '../store/types';\n\nexport interface AppProps {\n  mode: string;\n  lists: TodoList[];\n  aList: TodoList;\n}\n\ninterface AppContainerProps extends AppProps {\n  startupRequest: typeof appActions.startup;\n}\n\nconst App: React.FunctionComponent<AppProps> = (props) => {\n  const { mode } = props;\n  // const { mode, lists, aList } = props;\n  // console.log('-****- App: lists', lists);\n  // console.log('-****- App: aList', aList);\n\n  if (!mode) {\n    return <div className=\"error\">Mode undefined!</div>;\n  }\n\n  if (mode === appModes.MODE_LOADING) {\n    return <Spinner />;\n  }\n\n  if (mode === appModes.MODE_LIST_OF_LISTS) {\n    return <ListsApp />;\n  }\n\n  if (mode === appModes.MODE_A_LIST) {\n    return <TasksApp />;\n  }\n\n  if (mode === appModes.MODE_MOVE) {\n    return <MovePage />;\n  }\n\n  if (mode === appModes.DATA_CONFLICT) {\n    return <Failure msg=\"Data conflict\" />;\n  }\n\n  if (mode === appModes.MODE_ERROR) {\n    return <Failure />;\n  }\n\n  return <div className=\"error\">Mode {mode} not impelemented</div>;\n};\n\nexport default compose(\n  lifecycle<AppContainerProps, {}>({\n    componentDidMount() {\n      //     if (this.props.openAtStartup) {\n      //       // Uncomment when opening list at startup is back in fashion\n      //       // this.props.dispatch(listActions.addOrOpenListByNameAction(this.props.openAtStartup));\n      //     }\n      this.props.startupRequest();\n    },\n  }),\n)(App);\n","import { connect, Dispatch } from 'react-redux';\nimport { compose } from 'recompose';\nimport { bindActionCreators } from 'redux';\n\nimport App, { AppProps } from './App';\nimport { RootState } from '../store/reducers';\nimport { appActions } from '../store/actions';\n\ninterface AppPrivateProps extends AppProps {\n  startupRequest: typeof appActions.startup;\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  mode: state.app.mode,\n  // lists: listSelector.selectListOfLists(state),\n  // aList: listSelector.selectAList(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootState>) => {\n  return bindActionCreators(\n    {\n      startupRequest: appActions.startup,\n    },\n    dispatch,\n  );\n};\n\nexport default compose<AppPrivateProps, {}>(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n)(App);\n","import * as React from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\n\nimport { RootState } from '../../store/reducers';\n\nexport interface StatusProps {\n  message: string;\n}\n\nconst Status: React.FunctionComponent<StatusProps> = ({ message }) => <div> {message}</div>;\n\nconst mapStateToProps: MapStateToProps<StatusProps, void, RootState> = (state: RootState) => ({\n  message: state.status.message,\n});\n\nexport default connect(mapStateToProps)(Status);\n","import * as React from 'react';\nimport CONFIG from '../../config/config.js';\n\nconst base256 = (val: number, base: number) => {\n  return ('00' + Math.floor((val * 256) / base).toString(16)).substr(-2, 2);\n};\n\nconst substrToNum = (dateString: string, indexStart: number, indexEnd: number): number =>\n  parseInt(dateString.substring(indexStart, indexEnd), 10);\n\nconst versionColor = () => {\n  const dateString = CONFIG.version.replace(/-/g, '');\n  const r = base256(substrToNum(dateString, 2, 4), 31);\n  const g = base256(substrToNum(dateString, 0, 2), 12);\n  const b = base256(substrToNum(dateString, 4, 6), 24);\n  return `#${r}${g}${b}`;\n};\n\nconst User: React.FunctionComponent<{}> = () => (\n  <div>\n    <span className=\"list-item\">\n      <span style={{ color: versionColor() }}> {CONFIG.version}</span>{' '}\n      <small>\n        <b>{process.env.NODE_ENV}</b>\n      </small>\n    </span>\n    <span className=\"glyphicon glyphicon-cog action-button\" aria-hidden=\"true\" />\n    <span className=\"action-button\">{CONFIG.user.name}</span>\n    <audio id=\"clickSound\" src={CONFIG.clickSound} />\n    <hr />\n  </div>\n);\n\nexport default User;\n","export const createReducer = (initialState: any, handlers: any) => (state: any, actionC: any) => {\n  if (state === void 0) {\n    state = initialState;\n  }\n  if (Object.prototype.hasOwnProperty.call(handlers, actionC.type)) {\n    return handlers[actionC.type](state, actionC);\n  }\n  return state;\n};\n","import { createReducer } from '../../utils/frontend.utils';\nimport { ListCreds, TodoList } from '../types';\nimport * as Utils from '../../utils/utils';\nimport { appActions, listActions } from '../actions';\nimport { appModes } from '../../config/constants';\n\nexport type AppState = {\n  mode: string;\n  lists: TodoList[];\n  aList: TodoList;\n  task: string;\n  fromList: ListCreds;\n};\n\nexport const initialState: AppState = {\n  mode: appModes.MODE_LOADING,\n  lists: [],\n  aList: { id: '', userId: 0, name: '', tasks: '', done: '', immutable: false, lastAction: '' },\n  task: '',\n  fromList: { listId: '', name: '' },\n};\n\nconst appReducer = createReducer(initialState, {\n  [appActions.moveInitiationAction.type]: (state: AppState, action: any) => {\n    return {\n      ...state,\n      // statusMsg: 'Move task to ... ',\n      mode: appModes.MODE_MOVE,\n      fromList: action.payload.fromList,\n      task: action.payload.task,\n    };\n  },\n  [appActions.moveToListAction.type]: (state: AppState, action: any) => {\n    return {\n      ...state,\n      // statusMsg: 'Adding on top ...',\n      mode: appModes.MODE_LOADING,\n    };\n  },\n  [appActions.importListAction.type]: (state: AppState, action: any) => {\n    return {\n      ...state,\n      // statusMsg: 'Adding a list on top ...',\n      mode: appModes.MODE_LOADING,\n    };\n  },\n  [appActions.exportListAction.type]: (state: AppState, action: any) => {\n    return {\n      ...state,\n      // statusMsg: 'Exporting to a list ...',\n      mode: appModes.MODE_LOADING,\n    };\n  },\n  [appActions.errorAction.type]: (state: AppState) => {\n    return {\n      ...state,\n      mode: appModes.MODE_ERROR,\n    };\n  },\n  [appActions.dataConflictAction.type]: (state: AppState, action: any) => {\n    return {\n      ...state,\n      // statusMsg: new Date(action.payload).toLocaleTimeString('lt-LT'),\n      mode: appModes.DATA_CONFLICT,\n    };\n  },\n\n  // New, correct from here\n\n  [appActions.setMode.type]: (state: AppState, action: ReturnType<typeof appActions.setMode>) => {\n    return {\n      ...state,\n      mode: action.payload,\n    };\n  },\n  [listActions.getListOfLists.done.type]: (\n    state: AppState,\n    action: ReturnType<typeof listActions.getListOfLists.done>,\n  ) => {\n    return {\n      ...state,\n      lists: Utils.sortArrOfObjectsByParam(action.payload, 'updatedAt', true),\n    };\n  },\n  [listActions.getAList.done.type]: (state: AppState, action: ReturnType<typeof listActions.getListOfLists.done>) => {\n    return {\n      ...state,\n      aList: action.payload,\n    };\n  },\n});\n\nexport default appReducer;\n","import { createReducer } from '../../utils/frontend.utils';\nimport { statusActions } from '../actions';\nimport { setStatusMessage } from './status.actions';\n\nexport type StatusState = {\n  message: string;\n};\n\nexport const initialState: StatusState = {\n  message: 'Hello!',\n};\n\nconst statusReducer = createReducer(initialState, {\n  [setStatusMessage.type]: (state: StatusState, action: ReturnType<typeof statusActions.setStatusMessage>) => {\n    return {\n      ...state,\n      message: action.payload,\n    };\n  },\n});\n\nexport default statusReducer;\n","import { Action } from 'typescript-fsa';\nimport * as dotProp from 'dot-prop-immutable';\n\nimport { setSelectedList } from './selected.actions';\nimport { createReducer } from '../../utils/frontend.utils';\n\nexport type SelectedState = {\n  readonly listId: string | null;\n};\n\nexport const initialState: SelectedState = {\n  listId: null,\n};\n\nconst selectedReducer = createReducer(initialState, {\n  [setSelectedList.type]: (state: SelectedState, action: Action<number | null>) =>\n    dotProp.set(state, 'listId', action.payload),\n});\n\nexport default selectedReducer;\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport AppReducer, { AppState } from './app/app.reducer';\nimport StatusReducer, { StatusState } from './status/status.reducer';\nimport selectedReducer, { SelectedState } from './selected/selected.reducer';\n\nexport interface RootState {\n  app: AppState,\n  status: StatusState,\n  selected: SelectedState;\n  form: any;\n}\n\nexport default combineReducers({\n  app: AppReducer,\n  status: StatusReducer,\n  selected: selectedReducer,\n  form: formReducer,\n});\n","import { AxiosInstance } from 'axios';\nimport { OmitId, TodoList } from '../../../store/types';\n\nconst listsUrl = 'lists/';\nconst aListUrl = 'list/';\n\nconst ListsServiceFactory = ({ HTTPBase }: { HTTPBase: AxiosInstance }) => {\n  return {\n    callGetListOfList: (): Promise<TodoList[]> => HTTPBase.get(listsUrl).then((res) => res.data),\n    callGetAList: (listId: string): Promise<TodoList> => HTTPBase.get(`${aListUrl}${listId}`).then((res) => res.data),\n    callCreateAList: (aList: OmitId<TodoList>): Promise<TodoList> => HTTPBase.post(listsUrl, aList).then((res) => res.data),\n    callUpdateAList: (aList: TodoList): Promise<TodoList> =>\n      HTTPBase.put(`${aListUrl}${aList.id}`, aList).then((res) => res.data),\n    callDeleteAList: (listId: string): Promise<any> =>\n      HTTPBase.delete(`${aListUrl}${listId}`).then((res) => res.data),\n  };\n};\n\nexport default ListsServiceFactory;\n","import { ApiManager } from './apiManager';\nimport CONFIG from '../../config/config.js';\n\nconst host = process.env.NODE_ENV === 'development' ? CONFIG.devHost : CONFIG.apiHost;\nconst userId = CONFIG.user.id;\n\nexport default ApiManager({\n  HTTPBaseURL: `${host}${userId}/`,\n});\n","import { Error } from 'tslint/lib/error';\nimport CONFIG from '../config/config.js';\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\nexport type OmitId<T extends { id: string }> = Omit<T, 'id'>;\n\nexport interface TodoList {\n  id: string;\n  userId: number;\n  name: string;\n  tasks: string;\n  done: string;\n  immutable: boolean;\n  lastAction: string;\n}\n\nexport interface SerializedTodoList {\n  listId: string;\n  itemsDone: string[];\n  itemsTodo: string[];\n  lastAction: string;\n  previousAction: string;\n  taskToAdd?: string;\n  listData?: TodoList;\n}\n\nexport interface TodoListImpEx {\n  fromListId: string;\n  toListId: string;\n}\n\nexport interface TodoListMove {\n  fromListId: string;\n  toListId: string;\n  task: string;\n}\n\nexport interface TodoListMoveByName {\n  fromListId: string;\n  listName: string;\n  task: string;\n  move: boolean;\n  backToOldList?: boolean;\n}\n\nexport interface TodoListCopy {\n  toListId: string;\n  task: string;\n}\n\nexport interface ListCreds {\n  listId: string;\n  name: string;\n}\n\nexport interface HotKey {\n  key: string;\n  listId: string;\n  listName: string;\n}\n\nexport interface ListNameOnly {\n  listName: string;\n}\n\nexport const getNewTodoListEntity = (listName: string): OmitId<TodoList> => {\n  if (!listName) {\n    throw new Error('Trying create list without name!');\n  }\n  return {\n    userId: CONFIG.user.id,\n    lastAction: new Date().toISOString(),\n    name: listName,\n    tasks: '[]',\n    done: '[]',\n    immutable: false,\n  };\n};\n","import api from './index';\nimport { getNewTodoListEntity, TodoList } from '../../store/types';\n\nexport const apiGetListOfLists = (): Promise<TodoList[]> => api.lists.callGetListOfList();\nexport const apiGetAList = (listId: string): Promise<TodoList> => api.lists.callGetAList(listId);\nexport const apiCreateAList = (listName: string): Promise<TodoList> =>\n  api.lists.callCreateAList(getNewTodoListEntity(listName));\nexport const apiUpdateAList = (listId: string, data): Promise<TodoList> =>\n  api.lists.callUpdateAList({ id: listId, ...data } as TodoList);\nexport const apiDeleteAList = (listId: string): Promise<TodoList> => api.lists.callDeleteAList(listId);\n","import { all, put, select, takeEvery } from 'redux-saga/effects';\nimport { Action } from 'typescript-fsa';\nimport * as dotProp from 'dot-prop-immutable';\n\nimport * as utils from '../../utils/utils.js';\nimport {\n  ListNameOnly,\n  SerializedTodoList,\n  TodoList,\n  TodoListCopy,\n  TodoListImpEx,\n  TodoListMove,\n  TodoListMoveByName,\n} from '../types';\nimport { dayMonthName, dayNumber, dayString, dayWeekName } from '../../utils/calendar';\nimport { appSelector, statusSelector } from '../selectors';\nimport { appModes, statusMessages } from '../../config/constants';\nimport { appActions, listActions, selectedActions, statusActions } from '../actions';\nimport { findOrCreateListByNameHelperSaga, getAListSagaHelper, getListOfListsSagaHelper } from '../list/list.sagas';\nimport { getPreviousDays } from '../../utils/stringUtils';\nimport { apiCreateAList, apiDeleteAList, apiGetAList, apiGetListOfLists, apiUpdateAList } from '../../core/api/utils';\n\n/**\n * Check if TodoList can be safely saved, and update\n */\nfunction* checkAndSave({ payload }: Action<SerializedTodoList>) {\n  const { listId, listData, previousAction, taskToAdd } = payload;\n  yield put(statusActions.setStatusMessage(statusMessages.msgChecking));\n  const originalList = yield apiGetAList(listId);\n\n  // ToDo: not perfect\n  if (originalList.lastAction.slice(0, 19) !== previousAction.slice(0, 19)) {\n    if (taskToAdd) {\n      yield put(statusActions.setStatusMessage(statusMessages.msgAdding));\n      const data = {\n        toListId: listId,\n        task: taskToAdd,\n      };\n      // yield copyTaskToListSaga({ payload: data, type: '' });\n      yield put(appActions.copyToListAction(data));\n      // yield put(statusActions.setStatusMessage(statusMessages.msgAddedAndRefreshed));\n      return;\n    }\n    yield put(statusActions.setStatusMessage(statusMessages.msgDataConflict));\n    yield put(appActions.dataConflictAction(originalList.lastAction));\n    return;\n  }\n  yield put(statusActions.setStatusMessage(statusMessages.msgSaved));\n  yield apiUpdateAList(listId, listData);\n}\n\n/**\n * Create / open list by name\n */\nfunction* addOrOpenListsByNameSaga({ payload: { listName } }: Action<ListNameOnly>) {\n  try {\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingLists));\n    const listId = yield findOrCreateListByNameHelperSaga(listName);\n    yield put(appActions.openAList(listId));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Imports list into current list\n *\n * @param {TodoListImpEx} payload\n * @returns {IterableIterator<any>}\n */\nfunction* importListSaga({ payload }: Action<TodoListImpEx>) {\n  try {\n    const { fromListId, toListId } = payload;\n    const first = yield apiGetAList(fromListId);\n    const second = yield apiGetAList(toListId);\n    const data = {\n      lastAction: new Date().toISOString(),\n      tasks: utils.concatTwoJSONs(first.tasks, second.tasks),\n    };\n    yield apiUpdateAList(toListId, data);\n    yield put(appActions.openAList(toListId));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Exports list to another and deletes original\n *\n * @param {TodoListImpEx} payload\n * @returns {IterableIterator<any>}\n */\nfunction* exportListSaga({ payload }: Action<TodoListImpEx>) {\n  try {\n    const { fromListId, toListId } = payload;\n    const fromList = yield apiGetAList(fromListId);\n    const toList = yield apiGetAList(toListId);\n    const data = {\n      lastAction: new Date().toISOString(),\n      tasks: utils.concatTwoJSONs(fromList.tasks, toList.tasks),\n    };\n    yield apiUpdateAList(toListId, data);\n    yield apiDeleteAList(fromListId);\n    yield put(appActions.openAList(toListId));\n    yield put(statusActions.setStatusMessage(statusMessages.msgExported));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Moves task: copies to another and deletes from original, refreshes original\n *\n * @param {Action<TodoListMove>} action\n * @returns {IterableIterator<any>}\n */\nfunction* moveTaskToListSaga(action: Action<TodoListMove>) {\n  try {\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield removeTaskFromList(action);\n    yield prependToAList(action);\n    yield put(appActions.openAList(action.payload.fromListId));\n    yield put(statusActions.setStatusMessage(statusMessages.msgMoved));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Copies task to another list, opens target list\n *\n * @param {Action<TodoListCopy>} action\n * @returns {IterableIterator<any>}\n */\nfunction* copyTaskToListSaga(action: Action<TodoListCopy>) {\n  try {\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield prependToAList(action);\n    yield put(appActions.openAList(action.payload.toListId));\n    yield put(statusActions.setStatusMessage(statusMessages.msgCopied));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Moves task to list specified by name\n *\n * @param {Action<TodoListMoveByName>} action\n * @returns {IterableIterator<any>}\n */\nfunction* moveToListByNameSaga(action: Action<TodoListMoveByName>) {\n  try {\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    const listId = yield findOrCreateListByNameHelperSaga(action.payload.listName);\n    const newAction = dotProp.set(action, 'payload.toListId', listId);\n    yield prependToAList(newAction);\n    if (action.payload.move) {\n      yield removeTaskFromList(newAction);\n    }\n    yield put(appActions.openAList(action.payload.backToOldList ? action.payload.fromListId : listId));\n    yield put(appActions.setMode(appModes.MODE_A_LIST));\n    yield put(statusActions.setStatusMessage(statusMessages.msgMoved));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\nfunction* prependToAList({ payload }: Action<TodoListCopy>) {\n  try {\n    const { toListId, task } = payload;\n    const originalList = yield apiGetAList(toListId);\n    const data = {\n      lastAction: new Date().toISOString(),\n      tasks: utils.prependToJSON(task, originalList.tasks),\n    };\n    yield apiUpdateAList(toListId, data);\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\nfunction* removeTaskFromList({ payload }: Action<TodoListMove>) {\n  try {\n    const { fromListId, task } = payload;\n    const originalList = yield apiGetAList(fromListId);\n    const data = {\n      lastAction: new Date().toISOString(),\n      tasks: utils.removeTask(task, originalList.tasks),\n    };\n    yield apiUpdateAList(fromListId, data);\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n// New, correct from here\n/**\n * Load lists and go to main ListOfLists page\n */\nfunction* startupSaga() {\n  try {\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingLists));\n    yield getListOfListsSagaHelper();\n    yield put(appActions.setMode(appModes.MODE_LIST_OF_LISTS));\n    yield put(statusActions.setStatusMessage(statusMessages.msgListsLoaded));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Reload ListOfLists page\n */\nfunction* reloadListOfListsSaga() {\n  try {\n    const currentMode = yield select(appSelector.selectCurrentMode);\n    const currentMsg = yield select(statusSelector.getCurrentMessage);\n\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingLists));\n\n    yield getListOfListsSagaHelper();\n\n    yield put(appActions.setMode(currentMode));\n    yield put(statusActions.setStatusMessage(currentMsg));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Collects previous days todos into Today\n * Creates Today in not present\n */\nfunction* collectPastDaysSaga() {\n  try {\n    // Set messages\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingLists));\n\n    // Refresh list\n    const listOfLists = yield apiGetListOfLists();\n    // Save received list\n    yield put(listActions.getListOfLists.done(listOfLists));\n    // Find/create today's list\n    const todayListName = dayString(new Date());\n    let todayList = listOfLists.find((list: TodoList) => list.name === todayListName);\n    if (!todayList) {\n      yield put(statusActions.setStatusMessage(`statusMessages.msgCreatingAList${todayListName}`));\n      todayList = yield apiCreateAList(todayListName);\n      yield getListOfListsSagaHelper();\n    }\n\n    // Collect legacy ToDos\n    let prevDayList;\n    const legacyListIds: string[] = [];\n    let collectedTasks = todayList.tasks;\n    getPreviousDays().forEach((prevDayString) => {\n      // prevDayString = dayString(new Date(Date.now() - secsPerDay * before));\n      prevDayList = listOfLists.find((list: TodoList) => list.name === prevDayString);\n      if (prevDayList) {\n        legacyListIds.push(prevDayList.id as string);\n        collectedTasks = utils.concatTwoJSONs(collectedTasks, prevDayList.tasks);\n      }\n    });\n\n    // Update Today and delete legacy lists\n    if (legacyListIds.length) {\n      todayList = {\n        ...todayList,\n        lastAction: new Date().toISOString(),\n        tasks: collectedTasks,\n      } as TodoList;\n      yield apiUpdateAList(todayList.id, todayList);\n      yield put(statusActions.setStatusMessage(statusMessages.msgDeletingAList));\n      yield all(legacyListIds.map((listId) => apiDeleteAList(listId)));\n      yield getListOfListsSagaHelper();\n    }\n    yield put(listActions.getAList.done(todayList)); // ToDo: get rid of\n    yield put(selectedActions.setSelectedList(todayList.id));\n    yield put(statusActions.setStatusMessage(statusMessages.msgTodaysLoaded));\n    yield put(appActions.setMode(appModes.MODE_A_LIST));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n// ToDo: check why ListOfLists is not refreshed without mode change\nfunction* deleteAListSaga({ payload }: ReturnType<typeof appActions.deleteAList>) {\n  yield put(appActions.setMode(appModes.MODE_LOADING));\n  yield put(statusActions.setStatusMessage(statusMessages.msgDeletingAList));\n  yield apiDeleteAList(payload);\n  yield getListOfListsSagaHelper();\n  yield put(statusActions.setStatusMessage(statusMessages.msgListDeleted));\n  yield put(appActions.setMode(appModes.MODE_LIST_OF_LISTS));\n}\n\nconst isListRelevant = (listName: string, tryLists: string[]) => {\n  return tryLists.includes(listName);\n};\n\n/**\n * Creates lists for upcoming week\n */\nfunction* planWeekSaga() {\n  yield put(statusActions.setStatusMessage(statusMessages.msgPlanAWeek));\n  yield put(appActions.setMode(appModes.MODE_LOADING));\n  try {\n    // Refresh list\n    const listOfLists: TodoList[] = yield apiGetListOfLists();\n    const protectedLists = listOfLists.filter((l) => l.immutable);\n    const now = new Date();\n    let shiftDate = new Date();\n\n    for (let shift = 6; shift >= 0; shift--) {\n      shiftDate = new Date(now.getTime() + 1000 * 60 * 60 * 24 * shift);\n      const listName = dayString(shiftDate);\n      if (!listOfLists.find((list: TodoList) => list.name === listName)) {\n        const list = yield apiCreateAList(listName);\n        const tryLists = [\n          `Auto - ${dayNumber(shiftDate)}d.`,\n          `Auto - ${dayWeekName(shiftDate)}`,\n          `Auto - ${dayMonthName(shiftDate)} ${dayNumber(shiftDate)}d.`,\n        ];\n\n        const relList = protectedLists.filter((l) => isListRelevant(l.name, tryLists)).map((l) => l.name);\n        // console.log('-****- protectedLists', protectedLists.map((l) => l.name));\n        // console.log('-****- tryLists', tryLists);\n        // console.log('-****- relList', relList);\n\n        const append = protectedLists\n          .filter((l) => isListRelevant(l.name, tryLists))\n          .flatMap((l) => JSON.parse(l.tasks));\n\n        if (append.length) {\n          const todayList = {\n            lastAction: new Date().toISOString(),\n            tasks: JSON.stringify(append),\n          } as TodoList;\n          yield apiUpdateAList(list.id, todayList);\n        }\n      }\n    }\n    yield getListOfListsSagaHelper();\n    yield put(statusActions.setStatusMessage(statusMessages.msgWeekPlanned));\n    yield put(appActions.setMode(appModes.MODE_LIST_OF_LISTS));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Load and open page with a ToDoList\n */\n\nfunction* openAListByIdSaga({ payload }: ReturnType<typeof appActions.openAList>) {\n  try {\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingAList));\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n    const listName = yield getAListSagaHelper(payload);\n    yield put(appActions.setMode(appModes.MODE_A_LIST));\n    yield put(statusActions.setStatusMessage(`${listName}${statusMessages.msgLoaded}`));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Reload a list\n */\nfunction* reloadAListSaga({ payload }: ReturnType<typeof appActions.reloadAList>) {\n  try {\n    yield put(statusActions.setStatusMessage(statusMessages.msgLoadingAList));\n    yield put(appActions.setMode(appModes.MODE_LOADING));\n\n    const listName = yield getAListSagaHelper(payload);\n    if (listName) {\n      yield put(appActions.setMode(appModes.MODE_A_LIST));\n      yield put(statusActions.setStatusMessage(`${listName}${statusMessages.msgLoaded}`));\n      return;\n    }\n    yield getListOfListsSagaHelper();\n    yield put(statusActions.setStatusMessage(statusMessages.msgListsLoaded));\n    yield put(appActions.setMode(appModes.MODE_LIST_OF_LISTS));\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n\n/**\n * Fires Error action\n * @param e Error\n */\nexport function* generalFailure(e: Action<{}>) {\n  console.error(e);\n  yield put(appActions.errorAction(e));\n}\n\nexport default function* appSagas() {\n  yield all([\n    takeEvery(appActions.addOrOpenListByNameAction, addOrOpenListsByNameSaga),\n    takeEvery(appActions.checkAndSaveAction, checkAndSave),\n    takeEvery(appActions.moveToListAction, moveTaskToListSaga),\n    takeEvery(appActions.copyToListAction, copyTaskToListSaga),\n    takeEvery(appActions.moveToListByNameAction, moveToListByNameSaga),\n    takeEvery(appActions.importListAction, importListSaga),\n    takeEvery(appActions.exportListAction, exportListSaga),\n    takeEvery(appActions.planWeekAction, planWeekSaga),\n    // New from here\n    // takeEvery(appActions.openAList, openAListSaga),\n    takeEvery(appActions.startup, startupSaga),\n    takeEvery(appActions.openAList, openAListByIdSaga),\n    takeEvery(appActions.reloadListOfLists, reloadListOfListsSaga),\n    takeEvery(appActions.reloadAList, reloadAListSaga),\n    takeEvery(appActions.collectPastDays, collectPastDaysSaga),\n    takeEvery(appActions.deleteAList, deleteAListSaga),\n    // takeEvery(appActions.moveInitiationAction, moveInitiationActionSaga),\n  ]);\n}\n","import { all, call, put } from 'redux-saga/effects';\n\nimport { generalFailure } from '../app/app.sagas';\nimport api from '../../core/api';\nimport { getAList, getListOfLists } from './list.actions';\nimport { getNewTodoListEntity, TodoList } from '../types';\nimport { apiGetAList } from '../../core/api/utils';\n\nexport function* getListOfListsSagaHelper() {\n  const result = yield call(api.lists.callGetListOfList);\n  yield put(getListOfLists.done(result));\n}\n\nexport function* getAListSagaHelper(listId: string) {\n  const result = yield apiGetAList(listId);\n  yield put(getAList.done(result));\n  return result ? result.name : null;\n}\n\nexport default function* listSagas() {\n  yield all([]);\n}\n\n/**\n * Finds list by name or creates new\n */\nexport function* findOrCreateListByNameHelperSaga(listName: string) {\n  try {\n    const listOfLists = yield call(api.lists.callGetListOfList);\n    const found = listOfLists.find((list: TodoList) => list.name === listName);\n    if (found) {\n      return found.id;\n    }\n    const newList = yield call(api.lists.callCreateAList, getNewTodoListEntity(listName));\n    return newList.id;\n  } catch (e) {\n    yield generalFailure(e);\n  }\n}\n","import { all } from 'redux-saga/effects';\n\nimport listSagas from './list/list.sagas';\nimport appSagas from './app/app.sagas';\n\nexport default function* RootSaga() {\n  yield all([\n    appSagas(),\n    listSagas()\n  ]);\n}\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\nimport combineReducers from './reducers';\nimport RootSaga from './sagas';\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport function configureStore(middlewares: []) {\n  const sagaMiddleware = createSagaMiddleware();\n  const middleware = [sagaMiddleware, thunk, ...middlewares];\n  // middleware.push(authMiddleware);\n  // middleware.push(createLogger());\n\n  return {\n    ...createStore(combineReducers, composeEnhancers(applyMiddleware(...middleware))),\n    runSaga: sagaMiddleware.run,\n  };\n}\n\nexport function buildStore(middlewares: []) {\n  const store = configureStore(middlewares);\n  store.runSaga(RootSaga);\n  return store;\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport CONFIG from './config/config.js';\nimport App from './routes/AppContainer';\nimport Status from './routes/Status/Status';\nimport User from './routes/User';\nimport { buildStore } from './store/store';\n\nwindow.onbeforeunload = function() {\n  return 'Do you really want to leave ToDo app?';\n  // if we return nothing here (just calling return;) then there will be no pop-up question at all\n  // return;\n};\n\nconst store = buildStore([]);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  CONFIG.appNode,\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Status />\n  </Provider>,\n  CONFIG.statusNode,\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <User />\n  </Provider>,\n  CONFIG.userNode,\n);\n"],"sourceRoot":""}